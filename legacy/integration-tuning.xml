<!--
    Copyright (C) 2006 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xforms="http://www.w3.org/2002/xforms">
    <header>
        <title>Performance and Tuning</title>
    </header>
    <body>
        <section>
            <title>Tuning the Java Virtual Machine (JVM)</title>
            <section>
                <title>Set <code>-Xms</code> and <code>-Xmx</code> to the same value</title>
                <p>
                    The heap is a section of memory used by the JVM to store Java objects. You can
                    set constraints on the size of the heap with two parameters passed to the JVM at
                    startup: <code>-Xms</code> sets the initial size of the heap and
                    <code>-Xmx</code> sets the maximum size of the heap. If you set those two
                    parameters to different values, say 512MB and 1GB, you tell the JVM to start
                    with a heap size of 512MB and increase the size up to 1GB "as necessary". In
                    this case, the JVM has to balance two conflicting constraints: not request too
                    much memory from the operating system (getting too fast to 1GB), and not request
                    too little as it would increase the amount of time the to spends on garbage
                    collection which would will reduce the performance of your application.
                </p>
                <p>
                    Asking the JVM to balance memory usage and performance by setting different
                    values for <code>-Xms</code> and <code>-Xmx</code> is very reasonable for
                    desktop applications where a number of applications are running and competing
                    for resources, in particular memory. In a server environment, you often have one
                    or two major applications running on the server, like the JVM for your
                    application serer and maybe a database server. In this situation you have more
                    control over how much memory can be used by each application, and we recommend
                    you set both <code>-Xms</code> and <code>-Xmx</code> to the same value.
                </p>
            </section>
            <section>
                <title>Allocate a large heap but don't cause swapping</title>
                <p>
                    The larger the heap, the faster your application will be get. This for two
                    reasons: first, the JVM garbage collector works more efficiently with a larger
                    heap, and second, this enables you to increase the size of the OPS cache (more
                    on this later) which will also improve the performance of your application.
                    However, don't use a heap size so large that it would cause swapping, as this
                    would then drastically reduce the performance of your application.
                </p>
                <p>
                    We recommend that you first set the heap size based on how much memory the
                    server has and what other major applications are running. Say you have 2GB of
                    physical memory, and no other major application: then you could set the heap to
                    1.5GB, which leaves 512MB to the operating system and minor applications. Say
                    you have 4GB of physical memory and also a database running on the same server,
                    then you can set the heap size to 2GB, assign 1.5GB to the database server, and
                    leanve 512MB to the operating and minor applications.
                </p>
                <p>
                    Then, with a "reasonable" setting in place, monitor the server under normal load
                    and look if the machine is swapping or if on the contrary the operating system
                    is reporting a lot of available memory. In the first case, reduce the heap
                    size. In the second, increase it.
                </p>
            </section>
        </section>
        <section>
            <title>Tuning the application server</title>
            <section>
                <title>WebLogic: Disable automatic redeployment</title>
                <p>
                    WebLogic can be configured to check on a regular basis if the files of your
                    application have changed on disk, and redeploy the application if they did.
                    Redeploying at application server level is useful when you change the JAR files
                    or some of the underlying configuration files, like the web.xml. As checking if
                    files have changed is incredibly time consuming with WebLogic, and as you are
                    pretty unlikely to change any of those files on a regular basis, we recommend
                    you disable the automatic web application redeployment feature, which is
                    enabled by default.
                </p>
                <p>
                    To do this, after you have installed your OPS application, stop WebLogic, and
                    open the <code>config.xml</code> file in an editor. Look for the
                    <code>&lt;WebAppComponent Name="orbeon"></code> element and add the attribute:
                    <code>ServletReloadCheckSecs="-1"</code>.
                </p>
            </section>
            <section>
                <title>All application servers: Disable DNS lookup</title>
                <p>
                    You can configure your application server to perform a DNS lookup for every HTTP
                    request. The server always know the IP address of the machine where the HTTP
                    request originated. However, to get the name, the application server needs to
                    send a DNS lookup query to the DNS server. In most cases, performing this query
                    only has a negligible impact on performance. However, the request can take a
                    significant amount of time in certain cases where the network from which the
                    request originated is badly configured. In most case, the application server is
                    doing DNS lookups for "aesthetic reasons": that is to able to in include in the
                    logs the name of the client's machines, instead of their IP address (note that
                    web analysis tools can usually do this reverse DNS lookup much more efficiently
                    when analysing log files subsequently, typically on a daily basis). So we
                    recommend you change the configuration of your application server to disable DNS
                    lookup, which is in general enabled by default.
                </p>
                <p>
                    On Tomcat 5 (<a
                    href="http://tomcat.apache.org/tomcat-5.0-doc/config/http.html">external
                    documentation</a>), look for the <code>enableLookups</code> attribute on the
                    <code>&lt;Connector></code> element and set it to <code>false</code>. If the
                    attribute is not present, add it and set it to <code>false</code> (the default
                    value is <code>true</code>).
                </p>
            </section>
        </section>
        <section>
            <title>Tunning OPS</title>
            <a name="ops-cache"/>
            <section>
                <title>Tune the OPS cache size</title>
                <p>
                    One way to increase the performance of your application is to increase the size
                    of the OPS cache. You setup the size of the OPS cache with the <a
                    href="reference-properties#cache-size">oxf.cache.size</a> property. Due to
                    limitations of the JVM, you cannot set the size of the OPS cache in MB. Instead,
                    the value you specify the maximum number of objects that OPS can store in cache.
                    As the size of each object stored in cache is different and the average size of
                    those objects can change widely depending on your application, we can't give you
                    an equivalence between number of objects and memory used. Instead, we recommend
                    you follow the suggestions below to tune your OPS cache size.
                </p>
                <p>
                    First keep the default value for the OPS cache size and follow the suggestions
                    above to set your heap size. Then, adding the <code>-verbosegc</code> parameter,
                    monitor how the heap usage varies under typical load. In particular, pay a close
                    attention to how much memory is freed by a full GC done when the memory used
                    gets close the heap size. Note that a full GC will <i>not</i> get rid of
                    objects in the OPS cache. So assuming your heap size is 2GB, if after getting
                    close to 2GB a full GC brings back the heap usage to 0.5GB, as the cached
                    objects are included in those 0.5GB, it means you can and should to increase the
                    size of your OPS cache.
                </p>
                <p>
                    However, you should not increase the size to a point where a full GC can only
                    reclaim a small amount of memory, as this will trigger more frequent full GC
                    and so degrade the performance of your application. Typically, after the
                    application has been used for a while, you want a full GC to be able to reclaim
                    20 to 30% of the heap. If your heap size is 2GB, this means reducing the heap
                    usage to a value around 1.5GB range. The optimal value will change depending on
                    your JVM, server, and application, so you might want to try multiple values and
                    see how they impact performance.
                </p>
            </section>
            <section>
                <title>Consider server-side XForms state handling</title>
                <p>
                    The state of the XForms engine can be either stored on the server, or sent to
                    the client and exchanged with the server with each request. By default, the
                    XForms state is stored on the client. This option works in most cases and
                    doesn't require any tuning. However, you might want to consider storing the
                    XForms state on the server if your XForms instances are getting large or if your
                    users have low bandwidth connection to the server. See the <a
                    href="reference-xforms-ng#xforms-state-handling">XForms reference</a> for the
                    benefits and drawbacks of each option and for details on how to configure state
                    handling.
                </p>
            </section>
        </section>
        <section>
            <title>Tunning your application</title>
            <section>
                <title>Reduce the size of your XML documents</title>
                <p>
                    With XML, it is very easy to add data to an existing document and then extract
                    just the data you need from that document. This creates a tendency for the size
                    of the documents manipulated by your application to grow as you progress on the
                    development of your application. Who has never said "let's just add this
                    information to this existing document", or "let's keep this information in the
                    document and pass it around; you never know, we might need it in the future".
                    While this might be just fine in some cases, you need to make sure that the size of
                    your documents does not increase to the point where performance is impacted. If
                    you uncover a performance issue, checking and reducing the size of the documents
                    you manipulate is one of the first thing you might want to do.
                </p>
                <p>
                    If you need to be further convinced, consider an application where pages are
                    generated based on some information contained in an XML schema. This XML schema
                    is stored in an XML database and takes about a 100KB or 4000 lines when
                    serialized. Because data contained in the file is needed in multiple locations,
                    the file is passed around in a number of pipelines while generating a page, and
                    is used overall as input to 10 processors. Each processor will create its own
                    representation of the data in memory, which can take 10 times the size of the
                    serialized XML. That means that each processor has to allocate 1MB of objects
                    and do some processing one those objects. At the end of the request, 10MB of
                    memory have been allocated to process this data, and the garbage collector will
                    eventually have to spend CPU cycles on freeing this memory. What if out of the
                    4000 lines, only 400 are actually used? Starting by extracting those 400 lines
                    and then passing only those to the processors means that the processors now need
                    to do only one tenth of the work they were doing before. Cleary this type of
                    modification can drastically improve performance.
                </p>
               <p>
                    If you are required to work with large documents, also consider using an XML
                    database such as the open source <a
                    href="http://exist.sourceforge.net/">eXist</a> database, and delegate complex
                    queries to the database: this should be more efficient than continually
                    retrieving large XML documents and processing them in OPS.
               </p>
            </section>
            <section>
                <title>Tune your XSLT code</title>
                <p>
                    Some operations in XSLT or XPath can be very expensive. This in particular the
                    case for XPath expressions where the engine has to go through the whole input
                    document to evaluate the expression. Consider this XPath expression:
                    <code>//person</code>. To evaluate it, the engine iterates over every element in
                    the document looking for a <code>&lt;person></code>. If you know that given the
                    structure of the document, a person is inside a department, which is in a
                    company, you can rewrite this as <code>/company/department/person</code>, which
                    will typically run more efficiently.
                </p>
            </section>
            <section>
                <title>Enable XPL profiling</title>
                <p>
                    XPL profiling has been introduced with OPS 3.0 to give you detailed information
                    on how much time is being spent in each processor involved to generate a web
                    page. When enabled, for each HTTP request, the XPL profiler will output a tree
                    with all the processor calls. Each node of the tree represents the execution of
                    a processor. When a processor starts other processors, those are represented as
                    child nodes in the tree. With each node, the profiler outputs 2 numbers: the
                    first is for the time spent specifically by this processor; the second is for
                    the time spent cumulatively by this processor and all its children; both are in
                    milliseconds.
                </p>
                <p>
                    By default, XPL profiling is disabled. To enable XPL profiling, configure
                    <code>processor.trace</code>, <code>processor.trace.host</code>, and
                    <code>processor.trace.port</code> as described in the <a
                    href="reference-properties#trace">properties documentation</a>.
                </p>
            </section>
            <section>
                <title>Do not run your code in the examples portal</title>
                <p>
                    The OPS examples portal (i.e. the home page of OPS, which lists all the OPS
                    examples), while convenient to run examples, is not implemented optimally and
                    relies on portlets which cause overhead. The first thing to do is make sure that
                    your code runs outside of the examples portal, i.e. that your page flow entries
                    are present in the main page flow file (<code>resources/page-flow.xml</code>).
                </p>
            </section>
            <section>
                <title>Customize the standard epilogue</title>
                <p>
                    The <a href="reference-epilogue">standard OPS epilogue</a> can be optimized for
                    your own needs. For example, if you do not use <a
                    href="#xforms-classic-ng">XForms Classic</a>, you can remove the test for the
                    XForms classic engine; if you do not use "widgets", you can remove the inclusion
                    of <code>xforms-widgets.xsl</code>; if you are not using portlets (which is
                    likely), you can remove the test for portlets.
                </p>
            </section>
            <section>
                <title>Make sure you remove all your XPL <code>debug</code> attributes</title>
                <p>
                    While using <code>debug</code> attributes is one of the best ways to debug XPL
                    pipelines, those also have an impact on performance as they locally disable XPL
                    caching and also require time to serialize XML documents to your logger. For
                    performance testing and production, always remove all the <code>debug</code>
                    attributes.
                </p>
            </section>
            <section>
                <title>Don't serve your static files through OPS</title>
                <p>
                    It is overkill to serve static files such as static images through OPS, which
                    is optimized to run XPL pipelines. Instead, use your servlet container's
                    facilities for serving static files, or even better, use a simple web server
                    such as <a href="http://httpd.apache.org/">Apache Server</a>.
                </p>
            </section>
        </section>
        <section>
            <title>Other recommendations</title>
            <section>
                <title>Use a performance analysis tool</title>
                <p>
                    To obtain your numbers, use a tool such as <a
                    href="http://jakarta.apache.org/jmeter/">Apache JMeter</a>. Be sure to warm up
                    your Java VM first and to let the tool run for a significant number of sample
                    before recording your performance numbers.
                </p>
            </section>
            <section>
                <title>Make sure of what you are measuring</title>
                <p>
                    If you are testing the performance of an application that talks to a database
                    or backend services, be sure to be able to determine how much time your
                    front-end or presentation layer, versus your backend and data layers, are
                    respectively taking.
                </p>
            </section>
        </section>
    </body>
</document>

