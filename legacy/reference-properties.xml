<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms">
    <header>
        <title>Properties File</title>
    </header>
    <body>
        <section>
            <title>Overview</title>
            <ul>
                <li><p>
                    <b>Rationale</b> – The OPS properties are used by some processors to configure
                    or customize their behavior. This section describes how the system is
                    configured, and lists all the customizable properties.
                </p></li>
                <li><p>
                    <b>Properties File Location</b> – The properties sub-system is initialized after
                    the <link href="reference-resource-managers">Resource Manager</link> (the
                    properties being read like any other OPS resources). By default
                    it tries to load a file from the URL <code>oxf:/properties.xml</code>. This
                    value can be overridden in the Web application descriptor <code>web.xmxl</code>
                    with the <code>oxf.properties</code> initialization parameter:

                    <xml-source>
                        <context-param>
                            <param-name>oxf.properties</param-name>
                            <param-value>oxf:/config/properties.xml</param-value>
                        </context-param>
                    </xml-source>
                </p></li>
                <li><p>
                    <b>Automatic Reloading</b> – The property file is reloaded every time it is
                    changed, however some properties are taken into account only when the server is
                    first started.
                </p></li>
                <li><p>
                    <b>Property types</b> – Properties have a type, which must be one of the
                    following XML Schema simple types: <code>xs:anyURI</code>,
                    <code>xs:integer</code>, <code>xs:boolean</code>, <code>xs:QName</code>,
                    <code>xs:string</code>, <code>xs:date</code>, <code>xs:dateTime</code>.
                </p></li>
                <li><p>
                    <b>Global and Processor Properties</b> – There are two types of properties:
                    global properties that apply to the system as a whole, and processor-specific
                    properties. For instance, you set the cache size with a global property:

                    <xml-source>
                        <property as="xs:integer" name="oxf.cache.size" value="200"/>
                    </xml-source>

                    On the other hand setting the maximum amount of bytes that can be uploaded to
                    the server is set with a processor specific property. Note the additional
                    <code>processor-name</code> attribute:

                    <xml-source>
                        <property as="xs:integer" processor-name="oxf:request" name="max-upload-size"  value="100000000"/>
                    </xml-source>
                </p></li>
            </ul>
        </section>
        <section>
            <title>Global Properties</title>
            <a name="log4j"/>
            <section>
                <title>oxf.log4j-config</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Purpose</th>
                            <td>Configures the logging system</td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td>
                                <code>xs:anyURI</code>
                            </td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>The logging system not initialized with a warning if this property
                            is not present.</td>
                        </tr>
                    </table>
                </p>
                <p>
                    OPS uses the <fork
                    href="http://jakarta.apache.org/log4j/docs/index.html">Log4J</fork> logging
                    framework. Log4J is configured with an XML file conforming to the <link
                    href="log4j.dtd.html">Log4J DTD</link>. Here is a sample Log4J configuration:
                </p>
                <xml-source>
                    <log4j:configuration xmlns:log4j="log4j">
                        <appender name="ConsoleAppender" class="org.apache.log4j.ConsoleAppender">
                            <param name="Target" value="System.out"/>
                            <layout class="org.apache.log4j.PatternLayout">
                                <param name="ConversionPattern" value="%-4r [%t] %-5p %c %x - %m%n"/>
                            </layout>
                        </appender>
                        <catagory name="org.orbeon.oxf.processor.DebugProcessor">
                            <priority value="info"/>
                        </catagory>
                        <root>
                            <priority value="error"/>
                            <appender-ref ref="ConsoleAppender"/>
                        </root>
                    </log4j:configuration>
                </xml-source>
                <p>
                    If this property is not set, the Log4J initialization is skipped. This is
                    useful if another subsystem of your application has already initialized Log4J
                    prior to the loading of OPS.
                </p>
            </section>

            <a name="cache-size"/>
            <section>
                <title>oxf.cache.size</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Purpose</th>
                            <td>Setup the size of the OPS cache</td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td>
                                <code>xs:integer</code>
                            </td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>200</td>
                        </tr>
                    </table>
                </p>

                <p>
                    OPS uses an efficient caching system. OPS automatically determines what can be
                    cached and when to expire objects. The cache has a default size of 200, meaning
                    that it can hold 200 objects. This size is reasonable for most applications. A
                    bigger cache tends to make the application faster, but it uses more memory. To
                    tune the cache size, see the suggestions in the <a
                    href="integration-tuning#ops-cache">Performance and Tuning</a> section.
                </p>
            </section>
            <section>
                <title>oxf.validation.processor</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Purpose</th>
                            <td>Controls the automatic processor validation</td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td>
                                <code>xs:boolean</code>
                            </td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>Enabled</td>
                        </tr>
                    </table>
                </p>
                <p>
                    Many processors validate their configuration input with a schema. This
                    validation is automatic and allows meaningful error reporting. To potentially
                    improve the performance of the application, validation can be disabled in
                    production environments. It is however strongly discouraged to do so, as
                    validation can highly contribute to the robustness of the application.
                </p>
            </section>
            <section>
                <title>oxf.validation.user</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Purpose</th>
                            <td>Controls user-defined validation</td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td>
                                <code>boolean</code>
                            </td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>Enabled</td>
                        </tr>
                    </table>
                </p>
                <p>
                    User-defined validation is activated in the <link
                    href="reference-xpl-pipelines">XML Pipeline Definition Language</link> with the
                    attributes <code>schema-href</code> and <code>schema-uri</code>. To potentially
                    improve the performance of the application, validation can be disabled in
                    production environments. It is however strongly discouraged to do so, as
                    validation can highly contribute to the robustness of the application.
                </p>
            </section>
            <section>
                <title>oxf.prologue</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Purpose</th>
                            <td>Defines OPS processors</td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:anyURI</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>A default prologue is loaded automatically</td>
                        </tr>
                    </table>
                </p>
                <p>
                    Loads a OPS prologue file, where processors are declared.
                    OPS is bundled with a default prologue file containing all
                    processors. You can create processors (see the <link
                    href="reference-processor-api">processor API</link>) and declare them in a
                    custom prologue. The custom prologue doesn't replace, but completes the default
                    prologue. It is possible to override a default processor with a custom
                    implementation by binding it to the same URI as the default processor. The
                    following example shows a simple custom prologue declaring an hypothetical
                    processor:
                </p>
                <xml-source>
                    <processors>
                        <processor name="oxf:myprocessor">
                            <class name="com.company.oxf.MyProcessor"/>
                        </processor>
                    </processors>
                </xml-source>
            </section>
            <section>
                <title>sax.inspection</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Purpose</th>
                            <td>Enable inspection SAX events</td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:boolean</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>false</td>
                        </tr>
                    </table>
                </p>
                <p>
                    SAX is the underlying mechanism in OPS by which processors
                    receive and generate XML data. Given only the constraints of the SAX API, it is
                    possible for a processor to generate an invalid sequence of SAX events. Another
                    processor that receives that invalid sequence of events may or may not be able
                    to deal with it without throwing an exception. Some processors try to process
                    invalid SAX events, while others throw exceptions. This means that when a
                    processor generating an invalid sequence of SAX events is used in a pipeline,
                    the problem might go unnoticed, or it might cause some other processor
                    downstream to throw an exception.
                </p>
                <p>
                    To deal more efficiently with those cases, the <code>sax.inspection</code>
                    property can be set to <code>true</code>. When it is set to true, the pipeline
                    engine checks the outputs of every processor at runtime and makes sure that
                    valid SAX events are generated. When an error is detected, an exception is
                    thrown right away, with information about the processor that generated the
                    invalid SAX events.
                </p>
                <p>
                    There is a performance penalty for enabling SAX events inspection. So this
                    property should not be enabled on a production system.
                </p>
            </section>
            <a name="trace"/>
            <section>
                <title>processor.trace</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Specify the name of a class that implements the interface
                                <code>org.orbeon.oxf.pipeline.api.PipelineContext.Trace</code>.
                            </td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:NCName</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>None</td>
                        </tr>
                    </table>
                </p>
                <note>
                    <p>
                        OPS ships with two implementations of Trace,
                        <code>org.orbeon.oxf.processor.NetworkTrace</code> and
                        <code>org.orbeon.oxf.processor.StdOutTrace</code>.
                        <code>NetworkTrace</code> sends profiling information to Studio which the
                        displays the data in the trace views.  <code>StdOutTrace</code> simply
                        dumps profiling information to standard out.
                    </p>
                </note>
            </section>
            <section>
                <title>processor.trace.host</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Specify the host name that
                                <code>org.orbeon.oxf.processor.NetworkTrace</code> will send data
                                to.
                            </td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:NMTOKEN</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>localhost</td>
                        </tr>
                    </table>
                </p>
            </section>
            <section>
                <title>processor.trace.port</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Specify the port that
                                <code>org.orbeon.oxf.processor.NetworkTrace</code> will send data
                                to.
                            </td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:nonNegativeInteger</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>9191</td>
                        </tr>
                    </table>
                </p>
            </section>
        </section>
        <a name="java-processor"/>
        <section>
            <title>Java Processor Properties</title>
            <a name="java-classpath"/>
            <section>
                <title>Class Path</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Name</th>
                            <td><code>classpath</code></td>
                        </tr>
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Defines a directory where Java class files are located. The
                                <link href="processors-java">Java processor</link> dynamically
                                compiles Java code, and may need some libraries. This property
                                defines the classpath used by the compiler.
                            </td>
                        </tr>
                        <tr>
                            <th>Processor name</th>
                            <td><code><a href="processors-java">oxf:java</a></code></td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:string</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>None</td>
                        </tr>
                    </table>
                </p>
            </section>
            <a name="java-jarpath"/>
            <section>
                <title>JAR Path</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Name</th>
                            <td><code>jarpath</code></td>
                        </tr>
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Defines a list of directories where JAR files are located. The
                                <link href="processors-java">Java processor</link> dynamically
                                compiles Java code, and may need some libraries. This property
                                defines a "JAR path", a list of directories containing JAR files
                                that will be added to the classpath when compiling and running
                                the processor executed by the Java processor.
                            </td>
                        </tr>
                        <tr>
                            <th>Processor name</th>
                            <td><code><a href="processors-java">oxf:java</a></code></td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:string</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>None</td>
                        </tr>
                    </table>
                </p>
            </section>
            <a name="java-compiler-jar"/>
            <section>
                <title>Compiler JAR</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Name</th>
                            <td><code>compiler-jar</code></td>
                        </tr>
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Define a URL pointing to a JAR file containing the Java compiler to
                                use. If this property is set, the <link href="processors-java">Java
                                processor</link> adds the specified JAR file to the class path used
                                to search for the main compiler class.
                            </td>
                        </tr>
                        <tr>
                            <th>Processor name</th>
                            <td><code><a href="processors-java">oxf:java</a></code></td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:anyURI</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>
                                If the property is not specified, the Java processor tries to load
                                the main compiler class first using the current class loader. If
                                this fails, it retrieves the <code>java.home</code> system property
                                which specifies a directory on disk. If that directory is called
                                <code>jre</code>, and there exists a JAR file relative to that
                                directory under <code>../lib/tools.jar</code>, that JAR file is
                                added to the class path used to search for the main compiler class.
                                This covers most cases where the standard Sun JDK is used, so that
                                the <code>compiler-jar</code> property does not have to be
                                specified.
                            </td>
                        </tr>
                    </table>
                </p>
            </section>
            <a name="java-compiler-class"/>
            <section>
                <title>Compiler Main Class</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Name</th>
                            <td><code>compiler-class</code></td>
                        </tr>
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Define a class name containing the Java compiler to use. The <link
                                href="processors-java">Java processor</link> loads the corresponding
                                class and calls a static method on this class with the following
                                signature: <code>public static int compile(String[] commandLine,
                                PrintWriter printWriter)</code>.
                            </td>
                        </tr>
                        <tr>
                            <th>Processor name</th>
                            <td><code><a href="processors-java">oxf:java</a></code></td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:string</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>
                                <code>com.sun.tools.javac.Main</code>
                            </td>
                        </tr>
                    </table>
                </p>
            </section>
        </section>
        <a name="email-processor"/>
        <section>
            <title>Email Processor Properties</title>
            <section>
                <title>Global SMTP Host</title>
                <p>
                    The following property can be specified globally as a property instead of
                    being part of the processor configuration:
                </p>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Name</th>
                            <td><code>smtp-host</code></td>
                        </tr>
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Configure the SMTP host for all email processors. This global
                                property can be overridden by local processor configurations.
                            </td>
                        </tr>
                        <tr>
                            <th>Processor name</th>
                            <td><code><a href="processors-messaging-email">oxf:email</a></code></td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:string</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>None</td>
                        </tr>
                    </table>
                </p>
            </section>
            <p>
                The following properties can be used for testing purposes:
            </p>
            <section>
                <title>Test SMTP host</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Name</th>
                            <td><code>test-smtp-host</code></td>
                        </tr>
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Configure a test SMTP host for all email processors. This global
                                property when specified overrides all the other SMTP host
                                configurations for all Email processors, whether in the processor
                                configuration or using the <code>smtp-host</code> property.
                            </td>
                        </tr>
                        <tr>
                            <th>Processor name</th>
                            <td><code><a href="processors-messaging-email">oxf:email</a></code></td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:string</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>None</td>
                        </tr>
                    </table>
                </p>
                <note>
                    <p>
                        This property replaces the deprecated <code>smtp</code> property.
                    </p>
                </note>
            </section>
            <section>
                <title>Test Recipient</title>
                <p>
                    <table ca="|l|p{0.5\textwidth}|">
                        <tr>
                            <th>Name</th>
                            <td><code>test-to</code></td>
                        </tr>
                        <tr>
                            <th>Purpose</th>
                            <td>
                                Configure a test recipient email address for all email processors.
                                This global property when specified overrides all the other SMTP
                                recipient configurations for all Email processors.
                            </td>
                        </tr>
                        <tr>
                            <th>Processor name</th>
                            <td><code><a href="processors-messaging-email">oxf:email</a></code></td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td><code>xs:string</code></td>
                        </tr>
                        <tr>
                            <th>Default Value</th>
                            <td>None</td>
                        </tr>
                    </table>
                </p>
                <note>
                    <p>
                        This property replaces the deprecated <code>forceto</code> property.
                    </p>
                </note>
            </section>
            <p>
                For example, those properties can be used as follows:
            </p>
            <xml-source>
                <property as="xs:string" processor-name="oxf:email" name="smtp-host" value="mail.example.org"/>
                <property as="xs:string" processor-name="oxf:email" name="test-smtp-host" value="test.example.org"/>
                <property as="xs:string" processor-name="oxf:email" name="test-to" value="joe@example.org"/>
            </xml-source>
            <p>
                The test properties can easily be commented out for deployment.
            </p>
        </section>
    </body>
</document>
