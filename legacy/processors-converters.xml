<?xml version="1.0" encoding="iso-8859-1"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
          xmlns:xforms="http://www.w3.org/2002/xforms"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <header>
        <title>Converters</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                Converters are processors converting XML documents from one format to another. For
                example, the standard HTML converter documented below converts an XML document into
                an HTML document. This HTML document can then be sent to a web browser using the <a
                href="processors-serializers-http">HTTP serializer</a>, or attached to an
                email with the <a href="processors-messaging-email">Email processor</a>.
            </p>
            <p>
                Converters typically have a <code>data</code> output containing the converted
                document.
            </p>
        </section>
        <a name="standard-converters"/>
        <section>
            <title>Standard Converters</title>
            <p>
                The standard converters convert XML infosets (the XML documents that circulate in
                OPS pipelines) into text according to standard output methods
                defined by the XSLT specification. They convert to the following formats:
            </p>
            <ul>
                <li><b>XML:</b> a standard XML document</li>
                <li><b>HTML:</b> a standard HTML document</li>
                <li><b>XHTML:</b> a standard XHTML document</li>
                <li><b>Text:</b> any text document</li>
            </ul>
            <p>
                The resulting text is sent to the <code>data</code> output. It is embedded in an XML
                document as specified by the <a href="reference-formats#text-documents">text
                document format</a>.
            </p>
            <section>
                <title>Configuration</title>
                <p>
                    The configuration of the standard converters consists of the following optional
                    elements:
                </p>
                <table ca="|l|p{0.3\textwidth}|p{0.2\textwidth}|">
                    <tr>
                        <th>Element</th>
                        <th>Purpose</th>
                        <th>Default</th>
                    </tr>
                    <tr>
                        <td>method</td>
                        <td>XSLT output method (one of <code>xml</code>, <code>html</code>, <code>xhtml</code> or <code>text</code>)</td>
                        <td><code>xml</code>, <code>html</code> or <code>text</code>, depending on the serializer</td>
                    </tr>
                    <tr>
                        <td>content-type</td>
                        <td>Content type hint specified on the output <code>document</code> element</td>
                        <td>Specific to each serializer</td>
                    </tr>
                    <tr>
                        <td>encoding</td>
                        <td>Encoding hint specified on the output <code>document</code> element</td>
                        <td>utf-8</td>
                    </tr>
                    <tr>
                        <td>version</td>
                        <td>HTML or XML version number</td>
                        <td>4.01 for HTML (ignored for XML, which always output 1.0)</td>
                    </tr>
                    <tr>
                        <td>public-doctype</td>
                        <td>The public doctype</td>
                        <td>&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; for HTML, none otherwise</td>
                    </tr>
                    <tr>
                        <td>system-doctype</td>
                        <td>The system doctype</td>
                        <td>&quot;http://www.w3.org/TR/html4/loose.dtd&quot; for HTML, none otherwise</td>
                    </tr>
                    <tr>
                        <td>omit-xml-declaration</td>
                        <td>Specifies whether an XML declaration must be omitted</td>
                        <td>false for XML and HTML (i.e. a declaration is output by default), ignored otherwise</td>
                    </tr>
                    <tr>
                        <td>standalone</td>
                        <td>
                            If true, specifies <code>standalone="yes"</code> in the document
                            declaration. If false, specifies <code>standalone="no"</code> in the
                            document declaration. If missing, no standalone attribute is produced.
                            For more information about standalone document declarations, please
                            refer to the <a
                            href="http://www.w3.org/TR/2000/REC-xml-20001006#sec-rmd">relevant
                            section of the XML specification</a>. In most cases, this does not need
                            to be specified.
                        </td>
                        <td>not specified for XML, ignored otherwise</td>
                    </tr>
                    <tr>
                        <td>indent</td>
                        <td>
                            Specifies if the output is indented. This means that line breaks maybe
                            be inserted between adjacent elements. The actual level of indentation
                            is specified with the <code>indent-amount</code> configuration element.
                        </td>
                        <td>true (ignored for text method)</td>
                    </tr>
                    <tr>
                        <td>indent-amount</td>
                        <td>Specifies the number of indentation space</td>
                        <td>1 (ignored for text method)</td>
                    </tr>
                </table>
                <p>
                    Example:
                </p>
                <xml-source>
                    <config>
                        <content-type>text/html</content-type>
                        <encoding>utf-8</encoding>
                        <version>4.01</version>
                        <public-doctype>-//W3C//DTD HTML 4.01//EN</public-doctype>
                        <system-doctype>http://www.w3.org/TR/html4/strict.dtd</system-doctype>
                        <indent-amount>4</indent-amount>
                    </config>
                </xml-source>
            </section>
            <a name="xml-converter"/>
            <section>
                <title>XML Converter</title>
                <p>
                    The XML converter outputs an XML document conform to the XSLT <code>xml</code>
                    semantic. By default, the output is indented with no spaces and encoded using
                    the UTF-8 character set. The default MIME content type is
                    <code>application/xml</code>. The following is a simple XML converter example:
                </p>
                <xml-source>
                    <p:processor name="oxf:xml-converter">
                        <p:input name="config">
                            <config>
                                <content-type>application/xml</content-type>
                                <encoding>io-8859-1</encoding>
                                <version>1.0</version>
                            </config>
                        </p:input>
                        <p:input name="data" href="oxf:/my-xml-document.xml"/>
                        <p:output name="data" id="xml-document"/>
                    </p:processor>
                </xml-source>
                <p>
                    This is an example of output produced by the XML converter:
                </p>
                <xml-source>
                    <document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string" content-type="application/xml; charset=io-8859-1">&lt;?xml version="1.0" encoding="io-8859-1" standalone="no"?&gt; &lt;claim xmlns="http://orbeon.org/oxf/examples/bizdoc/claim"&gt; &lt;insured-info&gt; &lt;general-info&gt; &lt;name-info&gt; &lt;title-prefix&gt;Dr.&lt;/title-prefix&gt; &lt;last-name&gt;Doe&lt;/last-name&gt; &lt;first-name&gt;John&lt;/first-name&gt; &lt;title-suffix/&gt; &lt;/name-info&gt; &lt;address&gt; &lt;address-detail&gt; &lt;street-name&gt;N Columbus Dr.&lt;/street-name&gt; &lt;street-number&gt;511&lt;/street-number&gt; &lt;unit-number/&gt; &lt;/address-detail&gt; &lt;city&gt;Chicago&lt;/city&gt; &lt;state-province&gt;IL&lt;/state-province&gt; &lt;postal-code&gt;60611&lt;/postal-code&gt; &lt;country&gt;USA&lt;/country&gt; &lt;email&gt;jdoe@acme.org&lt;/email&gt; &lt;/address&gt; &lt;/general-info&gt; &lt;person-info&gt; &lt;gender-code&gt;M&lt;/gender-code&gt; &lt;birth-date&gt;1972-10-01&lt;/birth-date&gt; &lt;marital-status-code&gt;C&lt;/marital-status-code&gt; &lt;occupation&gt;Manager&lt;/occupation&gt; &lt;/person-info&gt; &lt;family-info&gt; &lt;children&gt; &lt;child&gt; &lt;birth-date&gt;2003-02-02&lt;/birth-date&gt; &lt;first-name&gt;Marco&lt;/first-name&gt; &lt;/child&gt; &lt;child&gt; &lt;birth-date/&gt; &lt;first-name/&gt; &lt;/child&gt; &lt;/children&gt; &lt;comments&gt;No comments at this point!&lt;/comments&gt; &lt;/family-info&gt; &lt;claim-info&gt; &lt;accident-type&gt;FOOT&lt;/accident-type&gt; &lt;accident-date&gt;2004-07-06&lt;/accident-date&gt; &lt;rate/&gt; &lt;/claim-info&gt; &lt;/insured-info&gt; &lt;/claim&gt;</document>
                </xml-source>
            </section>
            <section>
                <title>HTML Converter</title>
                <p>
                    The HTML converter outputs an HTML document conform to the XSLT
                    <code>html</code> semantic. By default, the <code>doctype</code> is set to <link
                    href="http://www.w3.org/TR/1998/REC-html40-19980424/sgml/loosedtd.html">HTML
                    4.0 Transitional</link> and the content is indented with no space and encoded
                    using the UTF-8 character set. The default content type is
                    <code>text/html</code>. The following is a simple HTML converter example:
                </p>
                <xml-source>
                    <p:processor name="oxf:html-converter">
                        <p:input name="config">
                            <config>
                                <content-type>text/html</content-type>
                                <encoding>io-8859-1</encoding>
                                <public-doctype>-//W3C//DTD HTML 4.01 Transitional//EN</public-doctype>
                                <version>4.01</version>
                            </config>
                        </p:input>
                        <p:input name="data">
                            <html>
                                <head>
                                    <title>My HTML document</title>
                                </head>
                                <body>
                                    <p>
                                        This is the content of the HTML document.
                                    </p>
                                </body>
                            </html>
                        </p:input>
                        <p:output name="data" id="html-document"/>
                    </p:processor>
                </xml-source>
                <p>
                    This is an example of output produced by the HTML converter:
                </p>
                <xml-source>
                    <document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string" content-type="text/html; charset=io-8859-1">
                        &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
                          &lt;html&gt;
                            &lt;head&gt;
                              &lt;title&gt;My HTML document&lt;/title&gt;
                            &lt;/head&gt;
                          &lt;body&gt;
                            &lt;p&gt;
                              This is the content of the HTML document.
                            &lt;/p&gt;
                          &lt;/body&gt;
                        &lt;/html&gt;
                    </document>
                </xml-source>
                <note>
                    <p>
                        The <link href="http://www.w3.org/TR/2000/REC-xml-20001006">XML 1.0
                        Specification</link> prohibits a DOCTYPE definition with a Public ID and
                        no System ID.
                    </p>
                </note>
            </section>
            <section>
                <title>Text Converter</title>
                <p>
                    The Text converter outputs a text document conform to the XSLT <code>text</code>
                    semantic. By default, the output is encoded using the UTF-8 character set. This
                    serializer is typically useful for pipelines generating Comma Separated Value
                    (CSV) files. The default content type is <code>text/plain</code>. The following
                    is a simple Text converter example:
                </p>
                <xml-source>
                    <p:processor name="oxf:text-converter">
                        <p:input name="config">
                            <config/>
                        </p:input>
                        <p:input name="data">
                            <document>
                                This is just plain text. It will be output without the <em>text</em> and <em>em</em> elements.
                            </document>
                        </p:input>
                        <p:output name="data" id="text-document"/>
                    </p:processor>
                </xml-source>
                <p>
                    This is an example of output produced by the Text converter:
                </p>
                <xml-source>
                    <document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string" content-type="text/plain; charset=utf-8">
                        This is just plain text. It will be output without the text and em
                        elements.
                    </document>
                </xml-source>
            </section>
        </section>
        <a name="to-xml-converter"/>
        <section>
            <title>To-XML Converter</title>
            <p>
                The To-XML Converter produces parsed XML documents from a binary document format.
            </p>
            <p>
                The <code>data</code> input of the To-XML Converter follows the <a
                href="reference-formats#binary-documents">binary document format</a>. Its
                <code>data</code> output is an XML document. The mandatory <code>config</code> input
                contains an empty <code>config</code> element reserved for future configuration
                parameters. This is an example of use:
            </p>
            <xml-source>
                <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline"
                          xmlns:oxf="http://www.orbeon.com/oxf/processors">

                    <p:param type="output" name="data"/>

                    <p:processor name="oxf:url-generator">
                        <p:input name="config">
                            <config>
                                <url>parsing-view.xsl</url>
                                <content-type>binary/octet-stream</content-type>
                                <force-content-type>true</force-content-type>
                            </config>
                        </p:input>
                        <p:output name="data" id="xml-file-as-binary"/>
                    </p:processor>

                    <p:processor name="oxf:to-xml-converter">
                        <p:input name="data" href="#xml-file-as-binary"/>
                        <p:input name="config">
                            <config/>
                        </p:input>
                        <p:output name="data" ref="data"/>
                    </p:processor>

                </p:config>
            </xml-source>
        </section>
        <section>
            <title>XSL-FO Converter</title>
            <p>
                The XSL-FO Converter produces PDF documents from an <link
                href="http://www.w3.org/TR/xsl/">XSL-FO</link> description of the page. The default
                content type is <code>application/pdf</code>.
            </p>
            <note>
                The input document of the XSL-FO must follow the <fork
                href="http://www.w3.org/TR/2001/REC-xsl-20011015/#">W3C XSL/FO
                Recommendation</fork>. Note that only subset of the recommendation implemented by <a
                href="http://xml.apache.org/fop/">FOP 0.20.5</a> is supported.
            </note>
            <p>
                The resulting binary stream is sent to the <code>data</code> output. It is embedded
                in an XML document as specified by the <a
                href="reference-formats#binary-documents">binary document format</a>.
            </p>
        </section>
<!--        <section>-->
<!--            <title>Chart Converter</title>-->
<!--            <p>-->
<!---->
<!--            </p>-->
<!--        </section>-->
        <a name="xls-converters"/>
        <section>
            <title>XLS Converters</title>
            <p>
                OPS ships with the <link
                href="http://jakarta.apache.org/poi/">POI</link> library which allows import and
                export of Microsoft Excel documents. OPS uses an Excel file
                template to define the layout of the spreadsheet. You define cells that will contain
                the values with a special markup.
            </p>
            <section>
                <title>Preparing the Spreadsheet</title>
                <p>
                    First, create an Excel spreadsheet with the formatting of your choosing. Apply
                    a special markup to the cell you need to export values to:
                </p>
                <ol>
                    <li>Select the cell</li>
                    <li>Go to the menu
                        <code>Format->Cell</code>
                    </li>
                    <li>
                        In the <code>Number</code> tab, choose the <code>Custom</code> format and
                        enter a format that looks like: <code>#,##0;"/a/b|/c/d"</code>. In this
                        example we have 2 XPath expressions separated by a pipe character
                        (<code>|</code>): <code>/a/b</code> and <code>/c/d</code>. The first XPath
                        expression is used when creating the Excel file (exporting) and is run
                        against the <code>data</code> input document of the To XLS converter. The
                        second expression is optional and is used when recreating an XML document
                        from the Excel file (importing with the From XLS converter).
                    </li>
                </ol>
            </section>
            <section>
                <title>To XLS Converter</title>
                <p>
                    The To XLS converter takes a <code>config</code> input describing the XLS
                    template file, and a <code>data</code> input containing the values to be
                    inserted in the template. The processor scans the template, and applies XPath
                    expressions to fill in the template. It returns a <a
                    href="reference-formats#binary-documents">binary document</a> on it
                    <code>data</code> output.
                </p>
                <p>
                    The <code>config</code> input takes a
                    single <code>config</code> element with one attribute:
                </p>
                <table>
                    <tr>
                        <th>
                            <code>template</code>
                        </th>
                        <td>A URL pointing to an XLS template file</td>
                    </tr>
                </table>
                <xml-source>
                    <p:processor name="oxf:xls-serializer">
                        <p:input name="config">
                            <config template="oxf:/excel/template.xls"/>
                        </p:input>
                        <p:input name="data">
                            <currency>
                                <value1>10</value1>
                                <value2>20</value2>
                                <value3>30</value3>
                            </currency>
                        </p:input>
                    </p:processor>
                </xml-source>
                <p>
                    The <code>config</code> element can also contain zero or more
                    <code>repeat-row</code> elements with two attributes, <code>row-num</code> and
                    <code>for-each</code>.
                </p>
<!--                <table>-->
<!--                    <tr>-->
<!--                        <th>-->
<!--                            <code>row-num</code>-->
<!--                        </th>-->
<!--                        <td></td>-->
<!--                    </tr>-->
<!--                    <tr>-->
<!--                        <th>-->
<!--                            <code>for-each</code>-->
<!--                        </th>-->
<!--                        <td></td>-->
<!--                    </tr>-->
<!--                </table>-->
                <p>
                    The To XLS converter is typically connected to the HTTP serializer. This allows
                    specifying headers such as <code>Content-Disposition</code>:
                </p>
                <xml-source>
                    <comment> Convert to XLS </comment>
                    <p:processor name="oxf:to-xls-converter">
                        <p:input name="config">
                            <config template="oxf:/examples/employees/export-excel/employees.xls">
                                <repeat-row row-num="3" for-each="employees/employee"/>
                            </config>
                        </p:input>
                        <p:input name="data" href="#workbook"/>
                        <p:output name="data" id="xls-binary"/>
                    </p:processor>

                    <comment> Serialize </comment>
                    <p:processor name="oxf:http-serializer">
                        <p:input name="data" href="#xls-binary"/>
                        <p:input name="config">
                            <config>
                                <header>
                                    <name>Content-Disposition</name>
                                    <value>attachment; filename=employees.xls</value>
                                </header>
                            </config>
                        </p:input>
                    </p:processor>
                </xml-source>
            </section>
            <section>
                <title>From XLS Converter</title>
                <p>
                    The From XLS converter takes an Excel file (for example uploaded with an XForms
                    upload control), finds special markup cells and reconstructs an XML document
                    from this markup. The converter has one <code>data</code> input which must
                    receive a <a href="reference-formats#binary-documents">binary document</a>, and
                    a <code>data</code> output containing the generated XML document. Assume the
                    following XForms model:
                </p>
                <xml-source>
                    <xf:model xmlns:xf="http://www.w3.org/2002/xforms"
                              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                              xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <xf:instance>
                            <form>
                                <action/>
                                <files>
                                    <file filename="" mediatype="" size="" xsi:type="xs:anyURI"/>
                                </files>
                            </form>
                        </xf:instance>
                        <xf:submission method="post" encoding="multipart/form-data"/>
                    </xf:model>
                </xml-source>
                <p>
                    The model can be filled with the following XForms controls:
                </p>
                <xml-source>
                    <xforms:group ref="/form">
                        <p>
                            <xforms:upload ref="files/file[1]"/>
                            <xforms:submit>
                                <xforms:label>Submit</xforms:label>
                                <xforms:setvalue ref="action">import</xforms:setvalue>
                            </xforms:submit>
                        </p>
                    </xforms:group>
                </xml-source>
                <p>
                    Then the following pipeline can extract the data from the uploaded file:
                </p>
                <xml-source>
                    <comment> Dereference URI stored in instance and return a binary </comment>
                    <p:processor name="oxf:url-generator">
                        <p:input name="config" href="aggregate('config', aggregate('url', #instance#xpointer(string(/form/files/file[1]))), aggregate('content-type', #instance#xpointer('application/octet-stream')))"/>
                        <p:output name="data" id="xls-binary"/>
                    </p:processor>

                    <comment> Convert file to XML </comment>
                    <p:processor name="oxf:from-xls-converter">
                        <p:input name="data" href="#xls-binary"/>
                        <p:output name="data" id="xls"/>
                    </p:processor>
                </xml-source>
                <p>
                    This is an example of returned document, given an appropriate configuration of the
                    Excel template:
                </p>
                <xml-source>
                    <workbook>
                        <sheet>
                            <employees>
                                <employee-id>5398</employee-id>
                                <firstname>Nils</firstname>
                                <lastname>Aas</lastname>
                                <phone>(555) 123 0434</phone>
                                <title>Norwegian sculptor and illustrator</title>
                                <age>70</age>
                                <manager-id/>
                                <employee-id>5028</employee-id>
                                <firstname>Ali</firstname>
                                <lastname>Abbasi</lastname>
                                <phone>(555) 123 0060</phone>
                                <title>BBC Scotland travel presenter</title>
                                <age>42</age>
                                <manager-id/>
                            </employees>
                        </sheet>
                    </workbook>
                </xml-source>
            </section>
        </section>
    </body>
</document>
