<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
          xmlns:xforms="http://www.w3.org/2002/xforms"
          xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xhtml="http://www.w3.org/1999/xhtml"
          xmlns:ev="http://www.w3.org/2001/xml-events">
    <header>
        <title>XForms Reference</title>
    </header>
    <body>
        <section>
            <title>Scope</title>
            <p>
                Web applications use forms to collect data from users. Orbeon PresentationServer
                (OPS)'s form handling capabilities are based on <link
                href="http://www.w3.org/MarkUp/Forms/">XForms</link>, namely the <a
                href="http://www.w3.org/TR/xforms/">XForms 1.0 W3C Recommendation</a>. This section
                provides an introduction to XForms concepts and explains how to use XForms in your
                OPS application.
            </p>
            <note>
                <p>
                    This document is considered a work in progress. While it does cover some
                    generic features of XForms, it focuses before all on features specific to the
                    OPS XForms engine. For more information about XForms, please refer to the
                    following resources:
                </p>
                <ul>
                    <li>
                        <a href="http://www.w3.org/TR/2005/PER-xforms-20051006/">XForms 1.0 (second
                        edition) W3C Proposed Edited Recommendation</a>
                    </li>
                    <li>
                        <a href="http://xformsinstitute.com/essentials/">XForms Essentials</a>, by
                        Micah Dubinko (also at <a
                        href="http://www.amazon.com/gp/product/0596003692/">Amazon</a>).
                    </li>
                    <li>
                        XForms: XML Powered Web Forms, by T. V. Raman (also at <a
                        href="http://www.amazon.com/gp/product/0321154991/">Amazon</a>).
                    </li>
                </ul>
            </note>
        </section>
        <a name="introduction"/>
        <section>
            <title>Introduction to XForms</title>
            <section>
                <title>Origin, Today, and Tomorrow</title>
                <p>
                    XForms 1.0 has been designed by the W3C based on experience with HTML forms. It
                    was promoted to the rank of W3C Recommendation in October 2003, and a <a
                    href="http://www.w3.org/TR/2005/PER-xforms-20051006/">second edition</a> of the
                    specification has been released in October 2005. As of December 2005, mainstream
                    browsers (Internet Explorer, Mozilla / Firefox, Opera, Safari) do not support
                    XForms natively, although XForms support in Mozilla is under way and plugins are
                    available for Internet Explorer. However you can already leverage the benefits
                    of XForms today by using a hybrid client-side / server-side XForms engine like
                    the one provided in OPS. The OPS XForms engine transparently generates HTML
                    forms and performs the work that would be done by an XForms-compliant browser.
                    This way you can start leveraging XForms today, be ready for upcoming
                    XForms-compliant browsers, and work smoothly with the mainstream browsers that
                    are deployed in the marketplace.
                </p>
                <p>
                    For more information about the whys and therefores of server-side XForms, please
                    read our article, <i>Are Server-Side XForms Engines the Future of XForms?</i>
                    (<a
                    href="http://idealliance.org/proceedings/xtech05/papers/03-08-03/">pre-conference
                    version</a> and <a href="http://www.orbeon.com/ops/xtech">updated version</a>).
                </p>
            </section>
            <section>
                <title>Benefits</title>
                <p>
                    Compared to HTML forms, XForms offers a higher level approach to forms. The
                    benefits are that less programming is needed (less JavaScript, and less
                    server-side programming), so forms are easier to create and modify. As an
                    illustration, let's consider some facets of XForms:
                </p>
                <ol>
                    <li>
                        <p>
                            <b>XML Representation of Forms.</b> XForms clearly defines how data
                            entered by the end-user is collected: it is stored in an XML document
                            called an XForms <i>instance</i>, an initially empty, "skeletal" XML
                            instance document that defines the structure of the data you wish to
                            collect from the user, which is afterwards filled out with information
                            collected from the user. For example, credit card information collected
                            on a web site can be structured as follows:
                        </p>
                        <xml-source>
                            <credit-card>
                                <type/>
                                <number/>
                                <expiration-month/>
                                <expiration-year/>
                            </credit-card>
                        </xml-source>
                        <p>
                            The outcome of the user filling out a form collecting this information
                            could be this complete XML document:
                        </p>
                        <xml-source>
                            <credit-card>
                                <type>visa</type>
                                <number>1234567812345678</number>
                                <expiration-month>8</expiration-month>
                                <expiration-year>2008</expiration-year>
                            </credit-card>
                        </xml-source>
                        <p>
                            An application using this data to do some processing (e.g. checking the
                            validity of the credit card) receives the above XML document. There is
                            no need to write code to go read HTTP request parameters, or to use a
                            framework performing this task: XForms does it all.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Declarative Constraints and Validation.</b> More often than not,
                            there are constraints on the data that can be entered by the end-user.
                            For instance, in the example we just considered, the card number must
                            have 16 digits and the expiration month must be a number between 1 and
                            12. Traditionally code must be written to check for those constraints.
                            And more code must be written to handle error conditions (getting back
                            to the page displaying the form and showing the appropriate error
                            messages). All this is done is very simple and declarative way with
                            XForms. For instance, checking that the expiration month is valid number
                            between 1 and 12 can be done with:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:bind nodeset="/credit-card/expiration-month" type="xs:integer" constraint=". >= 1 and 12 >= ."/>
                        </xml-source>
                        <p>
                            An error message can be attached to the "month" text field and if the
                            end-user enters an invalid month the XForms engine will notice that the
                            above constraint is not met and will display the error message. You do
                            not have to write any code for this to happen. We will see later how you
                            go about doing this with XForms in more details.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Declarative Event Handling.</b> User interfaces need to react to
                            user event such as mouse clicks and character entry. With most UI
                            frameworks, developers must register event handlers and implement them
                            in JavaScript, Java, or other traditional imperative languages. With
                            XForms, a set of predefined event handlers and actions are available,
                            which cover a set of useful cases without requiring understanding the
                            complex syntax and semantic of JavaScript or Java. For example, to set a
                            value into an XForms instance, you write:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:setvalue ref="/credit-card/expiration-month">11</xforms:setvalue>
                        </xml-source>
                        <p>
                            Once you have learned the simple built-in XForms actions, you can
                            combine them in sequences to obtain more complex behavior.
                        </p>
                    </li>
                </ol>
            </section>
            <!--
            <section>
                <title>Processing Model</title>
                <img print-format="pdf" src="pages/reference-xforms-model-controls.png" style="clear: both; float: right"/>
                <p>
                    XForms exposes two main components that are distinct but designed to work
                    closely with one another:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>XForms models:</b> XForms models define the data that needs to be
                            captured as well as constraints on this data.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>XForms controls:</b> XForms controls are widgets, like a text field or a
                            drop down combo box. They are generally used in an XHTML page to define the
                            visual representation of a form.
                        </p>
                    </li>
                </ul>
                <img print-format="pdf" src="pages/reference-xforms-operation-model.png" style="clear: both; float: right"/>
                <p>
                    At a high level, an application interacts with an end-user through the
                    following steps:
                </p>
                <ol>
                    <li>
                        <p>
                            The application generates an XHTML page which contains XForms controls,
                            and provides one or more XForms models for that page.
                        </p>
                    </li>
                    <li>
                        <p>
                            The XForms engine processes the XForms controls and sends a HTML page to the
                            end-user's browser.
                        </p>
                    </li>
                    <li>
                        <p>
                            The end-user fills out the form.
                        </p>
                        </li>
                    <li>
                        <p>
                            The XForms engine creates an XML document (called the XForms instance)
                            based on the values entered by the end-user, and sends this document to the
                            application.
                        </p>
                    </li>
                    <li>
                        <p>
                            The application performs its business logic based on the submitted XForms
                            instance.
                        </p>
                    </li>
                </ol>
                <p>
                    Your role as the author of an OPS application is:
                </p>
                <ul>
                    <li>
                        <p>
                            To provide one or more XForms models (step 1 above).
                        </p>
                    </li>
                    <li>
                        <p>
                            To provide the description of the form user interface using XForms
                            controls (step 1 above).
                        </p>
                    </li>
                    <li>
                        <p>
                            To respond to the submission of an XForms instance which contains data
                            captured from the end-user (step 5 above).
                        </p>
                    </li>
                </ul>
                <p>
                    In this chapter we explore the first two aspects. You hook-up your backend
                    logic for a page in your application page flow. The <a
                    href="reference-page-flow">Page Flow Controller</a> documentation details how
                    this is done.
                </p>
            </section>
            -->
        </section>
        <a name="xforms-getting-started"/>
        <section>
            <title>Getting Started With the OPS XForms Engine</title>
            <section>
                <title>The XForms Sandbox</title>
                <p>
                    The easiest way to get started with simple examples is to use the OPS XForms
                    Sandbox. This tool allows you to upload example XForms files from your web browser
                    and to see the results directly. You can access the XForms sandbox:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>Online:</b> visit <a
                            href="http://www.orbeon.com/ops/goto-example/xforms-sandbox">this link</a>
                            to access the online public XForms Sandbox.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Locally:</b> if this documentation is produced by your local installation
                            of OPS, visit <a href="/goto-example/xforms-sandbox">this link</a>.
                        </p>
                    </li>
                </ul>
                <p>
                    After submitting an XHTML + XForms file, the result, or errors, should display.
                    If you have changed your local XForms file, reloads that page in your browser
                    and this will upload again your local XForms file and the XForms Sandbox will
                    run the new version. To select another file to upload use your browser quotes
                    "back" button to return to the main XForms sandbox page.
                </p>
            </section>
            <!--
            <section>
                <title>Integrating XForms in OPS</title>
                <p>
                    TODO: past the sandbox, how to integrate XForms with OPS: single static page,
                    dynamic page, PFC and MVC, submissions, services, proxy mode, etc.
                </p>
            </section>
            -->
        </section>
        <section>
            <title>Programming With XForms 1.0</title>
            <a name="xforms-model"/>
            <section>
                <title>XForms Model</title>
                <img src="pages/reference-xforms-type.png" style="clear: both; float: right; margin-left: 1em"/>
                <section>
                    <title>Introduction</title>
                    <p>
                        To help in our exploration of XForms we consider a specific example: an
                        XForms Credit Card Verifier. This example displays a simple form asking
                        for a credit card number and related information to be entered, as shown on
                        the screenshot to the right. The information entered by the end-user is
                        validated by a set of rules and errors are flagged in red.
                    </p>
                    <p>
                        First, the information contained in the form is stored in an XML document
                        called an <i>XForms instance</i>, which is the skeleton or shell that will
                        contain the data captured by the form. You define an XForms instance within
                        an <code>xforms:instance</code>. In the Credit Card Verifier the unique
                        XForms instance is declared with:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:instance id="credit-card-instance">
                            <credit-card>
                                <type/>
                                <number/>
                                <expiration-month/>
                                <expiration-year/>
                                <verification-code/>
                                <valid/>
                            </credit-card>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        The XForms instance does not have to be empty of data: it can contain
                        initial values for the form. Here we set the <code>valid</code> element to
                        the value "false" by default:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:instance id="credit-card-instance">
                            <credit-card>
                                <type/>
                                <number/>
                                <expiration-month/>
                                <expiration-year/>
                                <verification-code/>
                                <valid>false</valid>
                            </credit-card>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        XForms instances are always contained in an <i>XForms model</i>, which:
                    </p>
                    <ol>
                        <li>
                            <p>Declares one or more XForms instance.</p>
                        </li>
                        <li>
                            <p>Optionally, declares a set of rules attached to the XForms instances.</p>
                        </li>
                        <li>
                            <p>Optionally, declares submissions.</p>
                        </li>
                    </ol>
                    <p>
                        At a minimum, the XForms instance above must be encapsulated as follows:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:model id="main-model">
                            <xforms:instance id="credit-card-instance">
                                <credit-card>
                                    <type/>
                                    <number/>
                                    <expiration-month/>
                                    <expiration-year/>
                                    <verification-code/>
                                    <valid>false</valid>
                                </credit-card>
                            </xforms:instance>
                        </xforms:model>
                    </xml-source>
                    <p>
                        Note that instances and models can have an optional <code>id</code>
                        attribute. If you have only one model and one instance, the id is optional,
                        but it becomes very convenient when more than one model or instance are
                        used.
                    </p>
                </section>
                <section>
                    <title>Model Item Properties</title>
                    <p>
                        In addition to one or more XForms instances, an XForms model can declare a
                        set of "rules", called "model item properties". Let's write a set of rules
                        for the above Credit Card Validation form. Specifically we want to:
                    </p>
                    <ol>
                        <li><p>Check that the credit card number is a number and valid according to particular credit card rules </p></li>
                        <li><p>Check that the expiration month is valid (integer between 1 and 12)</p></li>
                        <li><p>Check that the expiration year is valid (4 digit number)</p></li>
                        <li><p>Display the "verification code" line only if the card type is Visa or MasterCard</p></li>
                        <li><p>Check that the verification code is valid only for Visa or MasterCard</p></li>
                    </ol>
                    <p>
                        You describe each one of those rules with an <code>&lt;xforms:bind></code>
                        element in the XForms model. Rules apply to elements and attributes in the
                        XForms instance. You specify the elements and attributes each rule applies
                        to with an XPath expression in the mandatory <code>nodeset</code> attribute.
                        In addition to the <code>nodeset</code> attribute you want to have at least
                        one attribute specifying the essence of the rule. We go over the all the
                        possible attributes later in this section, but first let's see how we can
                        express the above rules for the Credit Card Verifier form:
                    </p>
                    <ol>
                        <li>
                            <p>
                                You specify that the credit card number must be a number with:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="number" type="xs:integer"/>
                            </xml-source>
                            <p>
                                The value of the <code>type</code> attribute is a W3C XML Schema
                                simple type. You can see the list of simple types in the <a href="
                                http://www.w3.org/TR/2001/REC-xmlschema-0-20010502/#CreatDt">XML
                                Schema primer</a>. If the end-user enters an invalid credit card
                                number (i.e. not a number), an error will be displayed as shows in
                                the screenshot on the right.
                            </p>
                        </li>
                        <li>
                            <p>
                                You can also constrain the value of an element or attribute with an
                                XPath expression in the <code>constraint</code> attribute. For
                                instance you specify that the expiration month must be an integer
                                between 1 and 12 with:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="expiration-month" constraint=". castable as xs:integer and . >= 1 and 12 >= ."/>
                            </xml-source>
                            <p>
                                Note that we have decided here not to bother checking the expiration
                                month if no credit card number was entered.
                            </p>
                        </li>
                        <li>
                            <p>
                                Similarly, you check that the expiration year is a 4 digit number with:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="expiration-year" constraint=". castable as xs:integer and string-length(.) = 4"/>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                You hide the "verification code" text field for American Express
                                cards with:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="verification-code" relevant="../type = 'visa' or ../type = 'mastercard'"/>
                            </xml-source>
                            <p>
                                The attribute we use here is <code>relevant</code>. By default, everything is
                                relevant in the XForms instance. If a "relevant" rule is specified, the
                                XPath expression is evaluated for each node in the nodeset, and if the
                                expression returns false, then the node is not considered relevant. When
                                a node is not relevant, the corresponding widget is not displayed (more
                                on this later).
                            </p>
                        </li>
                        <li>
                            <p>
                                Finally, you check that the verification code is entered for Visa
                                and Mastercard:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="verification-code"
                                    constraint="/credit-card/type = ('visa', 'mastercard') and . castable as xs:positiveInteger"/>
                            </xml-source>
                            <p>
                                Because the <code>verification-code</code> element has both a
                                <code>relevant</code> and a <code>constraint</code> attribute, we
                                combine them on the same <code>xforms:bind</code>:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="verification-code" relevant="../type = 'visa' or ../type = 'mastercard'"
                                    constraint="/credit-card/type = ('visa', 'mastercard') and . castable as xs:positiveInteger"/>
                            </xml-source>
                        </li>
                    </ol>
                    <p>
                        XPath expressions in <code>xforms:bind</code> are by default relative to the
                        root element of the first XForms instance. This allows you to write the
                        first constraint above:
                    </p>
                    <ul>
                        <li>
                            <p>
                                Relatively to the root element of the first XForms instance:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="number" type="xs:integer"/>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                With an absolute path in the first XForms instance:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="/credit-card/number" type="xs:integer"/>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                Referring explicitly to the "credit-card-instance" using the
                                <code>instance()</code> function:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="instance('credit-card-instance')/number" type="xs:integer"/>
                            </xml-source>
                        </li>
                    </ul>
                    <p>
                        Now that we have seen a few examples of model item properties, let's go over all
                        the XForms model item properties. Model item properties can essentially be used
                        for 3 purposes:
                    </p>
                    <table>
                        <tr>
                            <th>Validation</th>
                            <td>
                                <p>
                                    The purpose of validation is to determine if the content of an
                                    element or attribute in the XForms instance is valid. Invalid
                                    values can have an impact on how a form is displayed (you might
                                    want to highlight errors and show some information to help the
                                    end-user to correct the issue). Also, the XForms engine makes
                                    sure that invalid data cannot be submitted. There are 3 ways to
                                    validate the content of an element or attribute:
                                </p>
                                <ul>
                                    <li>
                                        <p>
                                            <b>required</b> &#8213; You can specify in the
                                            <code>required</code> attribute an XPath expression that
                                            determines if a value is required. The XPath can be as
                                            simple as <code>true()</code>, or more complex and
                                            depend on other values entered by the end-user. By
                                            default values are not required.
                                        </p>
                                    </li>
                                    <li>
                                        <p>
                                            <b>type</b> &#8213; In the <code>type</code> attribute
                                            you can specify a W3C XML Schema simple type. The
                                            <code>type</code> attribute complements the
                                            <code>required</code> attribute, but applies separately.
                                        </p>
                                        <p>
                                            <img src="pages/date-time.png" style="clear: both; float: right"/>
                                            In Addition, some XML schema types have special behavior:
                                            <ul>
                                                <li>
                                                    <p>
                                                        <b><code>xs:date</code></b> &#8213; The
                                                        input field is complemented by a pop-up
                                                        calendar. The user can enter a date
                                                        manually, or use the calendar to select a
                                                        date in the past or in the future. The
                                                        calendar is customizable by the application
                                                        developer under:
                                                        <code>oxf:/config/theme/jscalendar</code>
                                                   </p>
                                                </li>
                                                <!--
                                                <li>
                                                    <p>
                                                        <b><code>xs:time</code></b> &#8213; The
                                                        input field is broken up into three fields:
                                                        hours, minutes, and seconds. JavaScript
                                                        validation verifies the user's entries, and
                                                        prevents non-numeric characters, as well as
                                                        overflowing values (hours greater than 23,
                                                        minutes and seconds over 59). The JavaScript
                                                        code is customizable in the following file:
                                                        <code>oxf:/config/theme/JavaScript/time-utils.js</code>
                                                    </p>
                                                </li>
                                                -->
                                            </ul>
                                        </p>
                                    </li>
                                    <li>
                                        <p>
                                            <b>constraint</b> &#8213; The <code>constraint</code>
                                            attribute supports any XPath expression that returns a
                                            boolean value. If <code>false()</code> is returned,
                                            then the value is considered invalid, otherwise it is
                                            considered valid.
                                        </p>
                                    </li>
                                </ul>
                            </td>
                        </tr>
                        <tr>
                            <th>Calculation</th>
                            <td>
                                <p>
                                    The purpose of calculations is to dynamically compute values.
                                    You do this with the <code>calculate</code> attribute:
                                </p>
                                <ul>
                                    <li>
                                        <p>
                                            <b>calculate</b> &#8213; The content of the element or
                                            attribute will be set to the result of the evaluation of
                                            the XPath expression in the <code>calculate</code>
                                            attribute. This way you can automatically compute some
                                            values in the XForms instance based on other values,
                                            typically entered by the end-user. By default, nodes
                                            that contain calculated values are read-only.
                                        </p>
                                    </li>
                                </ul>
                            </td>
                        </tr>
                        <tr>
                            <th>Visibility</th>
                            <td>
                                <p>
                                    In general XForms instance nodes are not read-only and are
                                    relevant, which means that if an XForms control is bound to that
                                    node (e.g. a text field), the control is displayed and is
                                    editable by the end-user. You can change this by providing XPath
                                    expressions in the <code>readonly</code> and
                                    <code>relevant</code> attributes:
                                </p>
                                <ul>
                                    <li>
                                        <p>
                                            <b>readonly</b> &#8213; If the XPath expression in
                                            <code>readonly</code> evaluates to true, the control
                                            will be displayed in non-editable mode. Typically, in an
                                            XHTML user interface only the current value is
                                            displayed, instead of displaying a form element, like a
                                            text field.
                                        </p>
                                    </li>
                                    <li>
                                        <p>
                                            <b>relevant</b> &#8213; If the XPath expression in
                                            <code>relevant</code> evaluates to false, the control
                                            will not be displayed at all.
                                        </p>
                                    </li>
                                </ul>
                            </td>
                        </tr>
                    </table>
                </section>
            </section>
            <a name="xforms-controls"/>
            <section>
                <title>XForms Controls</title>
                <section>
                    <title>Controls</title>
                    <p>
                        XForms controls are similar to HTML form elements: they include text fields,
                        drop down lists, checkboxes, etc. These are some differences between HTML
                        forms elements and XForms controls:
                    </p>
                    <ul>
                        <li>
                            <p>
                                The value displayed by an XForms control comes from a node of the
                                XForms instance. When you declare a control, you bind it to a node
                                of your XForms instance with an XPath expression in the
                                <code>ref</code> attribute. For instance this text field a text
                                field is bound to the <code>&lt;number></code> element, which a
                                child of <code>&lt;credit-card></code>:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:input ref="/credit-card/number"/>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                The way a control is rendered depends on model item properties that
                                apply to the node the control is bound to: if it is bound to an
                                invalid node then an error can be displayed; if the control is bound
                                to a read-only node the value is displayed in read-only mode; if the
                                node is not relevant the control isn't be displayed at all; if the
                                control is bound to a non-existing node, the control is considered
                                non-relevant and is not displayed;
                            </p>
                        </li>
                    </ul>
                    <p>
                        The table below lists all the available XForms controls and shows for each one
                        the XML you need to use in your view, as well as an example showing that
                        control in action.
                    </p>
                    <table>
                        <tr>
                            <th>Control</th>
                            <th>XForms in the view</th>
                            <th>Example</th>
                        </tr>
                        <tr>
                            <td>
                                <b>Text field</b>
                                <img src="pages/reference-xforms-input.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:input ref="text"/>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Password field</b>
                                <img src="pages/reference-xforms-secret.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:secret ref="secret"/>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Text area</b>
                                <img src="pages/reference-xforms-textarea.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:textarea ref="textarea"/>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Radio buttons</b>
                                <img src="pages/reference-xforms-radio.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:select1 ref="carrier" appearance="full">
                                        <xforms:item>
                                            <xforms:label>Fedex</xforms:label>
                                            <xforms:value>fedex</xforms:value>
                                        </xforms:item>
                                        <xforms:item>
                                            <xforms:label>UPS</xforms:label>
                                            <xforms:value>ups</xforms:value>
                                        </xforms:item>
                                    </xforms:select1>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Single-selection lists</b>
                                <img src="pages/reference-xforms-select1-compact.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:select1 ref="carrier" appearance="compact">
                                        <xforms:item>
                                            <xforms:label>Fedex</xforms:label>
                                            <xforms:value>fedex</xforms:value>
                                        </xforms:item>
                                        <xforms:item>
                                            <xforms:label>UPS</xforms:label>
                                            <xforms:value>ups</xforms:value>
                                        </xforms:item>
                                    </xforms:select1>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Combo box</b>
                                <img src="pages/reference-xforms-combobox.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:select1 ref="payment" appearance="minimal">
                                        <xforms:item>
                                            <xforms:label>Cash</xforms:label>
                                            <xforms:value>cash</xforms:value>
                                        </xforms:item>
                                        <xforms:item>
                                            <xforms:label>Credit</xforms:label>
                                            <xforms:value>credit</xforms:value>
                                        </xforms:item>
                                    </xforms:select1>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Checkboxes</b>
                                <img src="pages/reference-xforms-checkbox.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:select ref="wrapping" appearance="full">
                                        <xforms:choices>
                                            <xforms:item>
                                                <xforms:label>Hard-box</xforms:label>
                                                <xforms:value>box</xforms:value>
                                            </xforms:item>
                                            <xforms:item>
                                                <xforms:label>Gift</xforms:label>
                                                <xforms:value>gift</xforms:value>
                                            </xforms:item>
                                        </xforms:choices>
                                    </xforms:select>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>List</b>
                                <img src="pages/reference-xforms-list.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:select ref="taste" appearance="compact">
                                        <xforms:item>
                                            <xforms:label>Vanilla</xforms:label>
                                            <xforms:value>vanilla</xforms:value>
                                        </xforms:item>
                                        <xforms:item>
                                            <xforms:label>Strawberry</xforms:label>
                                            <xforms:value>strawberry</xforms:value>
                                        </xforms:item>
                                    </xforms:select>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Trigger button</b>
                                <img src="pages/reference-xforms-trigger-button.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:trigger>
                                        <xforms:label>Add carrier</xforms:label>
                                    </xforms:trigger>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                        <!-- TODO: show other apperances for trigger -->
                        <tr>
                            <td>
                                <b>Submit button</b>
                                <img src="pages/reference-xforms-submit-button.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:submit submission="main-submission">
                                        <xforms:label>Submit</xforms:label>
                                    </xforms:submit>
                                </xml-source>
                            </td>
                            <td>
                                -
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Submit link</b>
                                <img src="pages/reference-xforms-submit-link.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:submit submission="main-submission" appearance="xxforms:link">
                                        <xforms:label>Submit</xforms:label>
                                    </xforms:submit>
                                </xml-source>
                            </td>
                            <td>
                                -
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Submit image</b>
                                <img src="pages/reference-xforms-submit-image.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:submit submission="main-submission" appearance="xxforms:image">
                                        <xxforms:img src="images/submit.gif"/>
                                        <xforms:label>Submit</xforms:label>
                                    </xforms:submit>
                                </xml-source>
                            </td>
                            <td>
                                -
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Upload</b>
                                <img src="pages/reference-xforms-upload-image.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:upload ref="files/file[1]">
                                        <xforms:filename ref="@filename"/>
                                        <xforms:mediatype ref="@mediatype"/>
                                        <xxforms:size ref="@size"/>
                                    </xforms:upload>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-upload">Upload Control</a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <b>Range</b>
                                <img src="pages/reference-xforms-range.png"/>
                            </td>
                            <td>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:range ref="range/value">
                                        <xforms:send submission="countries-submission" ev:event="xforms-value-changed"/>
                                    </xforms:range>
                                </xml-source>
                            </td>
                            <td>
                                <a href="../goto-example/xforms-controls">XForms Controls</a>
                            </td>
                        </tr>
                    </table>
                    <p>
                        In the examples above, the labels and values for the <code>select</code> and
                        <code>select1</code> controls are declared in the control element with
                        multiple <code>&lt;xforms:item></code> elements. Alternatively the
                        label/value pairs can be pulled out from the instance. You do this with an
                        <code>&lt;xforms:itemset></code> element (instead of
                        <code>&lt;xforms:item></code> elements):
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:select1 ref="country" appearance="compact">
                            <xforms:itemset nodeset="instance('countries')/country">
                                <xforms:label ref="name"/>
                                <xforms:value ref="us-code"/>
                            </xforms:itemset>
                        </xforms:select1>
                    </xml-source>
                </section>
                <a name="xforms-label-alert-help-hint"/>
                <section>
                    <title>Label, Alert, Help, and Hint</title>
                    <p>
                        Nested inside each XForms control element, you can specify additional
                        elements that can alter the way the control is displayed. The table below
                        lists those elements:
                    </p>
                    <table>
                        <tr>
                            <th>Label</th>
                            <td>
                                <img src="pages/reference-xforms-submit-button.png"/>
                            </td>
                            <td>
                                <p>
                                    By default a label is used in submit controls, as well as the
                                    single and multiple selection controls, as shown in the table
                                    above. The <code>label</code> element is mandatory for all
                                    controls.
                                </p>
                            </td>
                        </tr>
                        <tr>
                            <th>Alert</th>
                            <td>
                                <img src="pages/reference-xforms-alert.png"/>
                            </td>
                            <td>
                                <p>
                                    In each control you can specify an error message that can be
                                    displayed if the value entered by the user triggers a validation
                                    error.
                                </p>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:secret ref="secret">
                                        <xforms:alert>Invalid password</xforms:alert>
                                    </xforms:secret>
                                </xml-source>
                            </td>
                        </tr>
                        <tr>
                            <th>Hint</th>
                            <td>
                                <img src="pages/reference-xforms-hint.png"/>
                            </td>
                            <td>
                                <p>
                                    You can specify a hint on each control, which is displayed next
                                    to the control and becomes highlighted when the control is
                                    selected.
                                </p>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:textarea ref="textarea">
                                        <xforms:hint>Enter at least 11 characters</xforms:hint>
                                    </xforms:textarea>
                                </xml-source>
                            </td>
                        </tr>
                        <tr>
                            <th>Help</th>
                            <td>
                                <img src="pages/reference-xforms-help.png"/>
                            </td>
                            <td>
                                <p>
                                    If you specify a help message for a control, an icon with a
                                    question mark is displayed next to the control. A pop-up shows
                                    the help message when you position the mouse cursor over the
                                    icon.
                                </p>
                                <xml-source border="false" show-namespaces="false">
                                    <xforms:input ref="date" class="xforms-date">
                                        <xforms:label class="fixed-width">Birth date:</xforms:label>
                                        <xforms:help>
                                            This is supposed to be a help message explaining what a birth date is.
                                            But since you already know, it mostly serves the purpose of showing how
                                            help messages can be attached to controls, and that they can be pretty
                                            long as they can be displayed on multiple lines.
                                        </xforms:help>
                                    </xforms:input>
                                </xml-source>
                            </td>
                        </tr>
                    </table>
                    <p>
                        In the examples above, the text displayed is directly in the
                        <code>&lt;xforms:label></code>, <code>&lt;xforms:alert></code>,
                        <code>&lt;xforms:help></code>, or <code>&lt;xforms:hint></code> element.
                        Alternatively that text can come from an XForms instance with a
                        <code>ref</code> attribute on any one of those elements. The
                        <code>ref</code> references a node in the instant that contains the text to
                        use. This is illustrated in the code below from the <a
                        href="/goto-example/xforms-text">XForms Text Controls</a> example:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:secret ref="secret">
                            <xforms:alert ref="@alert"/>
                        </xforms:secret>
                    </xml-source>
                </section>
                <a name="xforms-upload"/>
                <section>
                    <title>Upload</title>
                    <p>
                        XForms allows you to upload files with the XForms Upload control:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:upload ref="files/file[1]">
                            <xforms:filename ref="@filename"/>
                            <xforms:mediatype ref="@mediatype"/>
                            <xxforms:size ref="@size"/>
                        </xforms:upload>
                    </xml-source>
                    <p>
                        The related section of the XForms instance can look like this:
                    </p>
                    <xml-source>
                        <files>
                            <file filename="" mediatype="" size="" xsi:type="xs:anyURI"/>
                        </files>
                    </xml-source>
                    <p>
                        The <code>file</code> element is the element storing the result of the file
                        upload. The result can be stored in two ways:
                    </p>
                    <ul>
                        <li>As a URL, by specifying the type <code>xs:anyURI</code>.</li> <li>As
                        Base64-encoded text, by specifying the type <code>xs:base64Binary</code>.
                        Base64 is a mechanism to encode any binary data using a 65-character subset
                        of US-ASCII. Using this mechanism allows embedding binary data into XML
                        documents, at the typical cost of taking 50% more space than the original
                        binary data. For more information, please refer to the <a
                        href="http://www.ietf.org/rfc/rfc2045.txt">RFC</a>.</li>
                    </ul>
                    <note>
                        <p>
                            It is mandatory to specify either one of <code>xs:anyURI</code> or
                            <code>xs:base64Binary</code>.
                        </p>
                    </note>
                    <p>
                        The optional <code>xforms:filename</code>, <code>xforms:mediatype</code>, and
                        <code>xxforms:size</code> (the latter being an extension) allow storing metadata
                        about an uploaded file:
                    </p>
                    <ul>
                        <li>
                            <code>xforms:filename</code>: stores the file name sent by the user agent</li>
                        <li>
                            <code>xforms:mediatype</code>: store the media type sent by the user agent</li>
                        <li>
                            <code>xxforms:size</code>: stores the actual size in bytes of the uploaded data</li>
                    </ul>
                    <p>
                        Note that the file name and the media type are provided by the user agent
                        (typically a web browser) and are not guaranteed to be correct.
                    </p>
                    <p>
                        The result of a file upload can look as follows when using
                        <code>xs:anyURI</code>:
                    </p>
                    <xml-source>
                        <file filename="photo.jpg" mediatype="image/jpeg" size="2345" xsi:type="xs:anyURI">file:/C:/Tomcat/temp/upload_00000005.tmp</file>
                    </xml-source>
                    <warning>
                        The URL stored as the value of the upload is temporary and only valid for the
                        duration of the current request. It is only accessible from the server side, and
                        will not be accessible from a client such as a web browser. It is not guaranteed
                        to be a <code>file:</code> URL, only that it can be read with Presentation
                        Server's <a href="processors-generators-url">URL generator</a>.
                    </warning>
                    <p>
                        The contents of the file can be retrieved using the URL Generator. The result
                        will be an XML document containing a single root element containing the uploaded
                        file in Base64-encoded text.
                    </p>
                    <note>
                        <p>
                            Using the <code>xs:anyURI</code> type allows OPS to make sure the uploaded
                            file does not have to reside entirely in memory. This is the preferred
                            method for uploading large files.
                        </p>
                    </note>
                    <p>
                        The result of a file upload can look as follows when using
                        <code>xs:base64Binary</code>:
                    </p>
                    <xml-source>
                        <file filename="photo.jpg" mediatype="image/jpeg" size="2345" xsi:type="xs:base64Binary">
                            /9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAQDAwQDAwQEBAQFBQQFBwsHBwYGBw4KCggLEA4RERAO
                            EA8SFBoWEhMYEw8QFh8XGBsbHR0dERYgIh8cIhocHRz/2wBDAQUFBQcGBw0HBw0cEhASHBwcHBwc
                            ...
                        </file>
                    </xml-source>
                    <p>
                        In this case, the uploaded file is encoded an directly embedded into the XML
                        instance. This is a good method to handle small files only, because the entire
                        file is converted and stored in memory.
                    </p>
                    <p>
                        Make sure, in your XForms model, that you have the correct submission method and
                        encoding:
                    </p>
                    <p>
                        <xml-source>
                            <xforms:submission method="post" encoding="multipart/form-data"/>
                        </xml-source>
                    </p>
                </section>
            </section>
            <a name="xforms-repeat"/>
            <section>
                <title>Repeating with <code>xforms:repeat</code></title>
                <section>
                    <title>Basics</title>
                    <p>
                        A very common requirement of user interfaces consists in repeating visual
                        elements, such as rows in a table or entries in a list. Those repeated
                        sections usually have an homogeneous aspect: they all have the same or a
                        very similar structure. For example, multiple table rows will differ only in
                        the particular content they display in their cells. An example of this is an
                        invoice made of lines with each a description, unit price, and quantity.
                    </p>
                    <p>
                        XForms provides a very powerful mechanism to implement such repeated structures:
                        the <code>xforms:repeat</code> element. You use <code>xforms:repeat</code>
                        around XHTML elements or XForms controls. For example, to repeat a table row,
                        you write:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:repeat>
                            <xhtml:tr>
                                ...
                            </xhtml:tr>
                        </xforms:repeat>
                    </xml-source>
                    <p>
                        This is not enough to be functional code: you need to indicate to the
                        <code>xforms:repeat</code> element how many repetitions must be performed. This
                        is done not by supplying a simple count value, but by binding the the element to
                        a node-set with the <code>nodeset</code> attribute. Consider the following
                        XForms instance:
                    </p>
                    <xml-source>
                        <xforms:instance id="employees-instance">
                            <employees>
                                <employee>
                                    <first-name>Alice</first-name>
                                </employee>
                                <employee>
                                    <first-name>Bob</first-name>
                                </employee>
                                <employee>
                                    <first-name>Marie</first-name>
                                </employee>
                            </employees>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        Assuming you want to produce one table row per employee, add the following
                        <code>nodeset</code> attribute:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:repeat nodeset="instance('employees-instance')/employee">
                            <xhtml:tr>
                                ...
                            </xhtml:tr>
                        </xforms:repeat>
                    </xml-source>
                    <p>
                        This produces automatically three <code>xhtml:tr</code> rows. Note that we
                        explicitly use the XForms <code>instance()</code> function, but you may not have
                        to do so if that instance is already in scope. Then you display in each row the
                        content of the <code>first-name</code> element for each employee:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:repeat nodeset="instance('employees-instance')/employee">
                            <xhtml:tr>
                                <xhtml:td>
                                    <xforms:output ref="first-name"/>
                                </xhtml:td>
                            </xhtml:tr>
                        </xforms:repeat>
                    </xml-source>
                    <p>
                        This works because for each iteration, the <i>context node</i> for the
                        <code>ref</code> attribute changes: during the first iteration, the context node
                        is the first <code>employee</code> element of the XForms instance; during the
                        second iteration, the second <code>employee</code> element, and so on.
                    </p>
                    <note>
                        The <code>nodeset</code> attribute of <code>xforms:repeat</code> must point
                        to a so-called <i>homogeneous collection</i>. Such a collection must consist
                        of contiguous XML elements with same name and same namespace. XForms does
                        not predict what happens if the node-set is not homogenous.
                    </note>
                </section>
                <!--
                <section>
                    <title>Repeat Index</title>
                    <p>
                        TODO
                    </p>
                </section>
                -->
                <section>
                    <title>Deleting Rows with the <code>xforms:delete</code> Action</title>
                    <p>
                        <code>xforms:repeat</code> may be used purely for display purposes, but it
                        can also be used for interactively editing repeated data. This includes
                        allowing the user to delete and insert rows. Two XForms actions are used
                        for this purpose: <code>xforms:delete</code> and <code>xforms:insert</code>.
                    </p>
                    <p>
                        <code>xforms:delete</code> is provided with a <code>nodeset</code> attribute
                        pointing to the homogenous collection into which the insertion must take
                        place. It also has an <code>at</code> attribute, which contains an XPath
                        expression returning the index of the element to delete. See how
                        <code>xforms:delete</code> is used in these 3 scenarios:
                    </p>
                    <xml-source show-namespaces="false">
                        <comment> This deletes the last element of the collection </comment>
                        <xforms:delete nodeset="employees" at="last()"/>
                        <comment> This deletes the first element of the collection </comment>
                        <xforms:delete nodeset="employees" at="1"/>
                        <comment> This deletes the currently selected element of the collection (assuming the repeat id 'employee-repeat') </comment>
                        <xforms:delete nodeset="employees" at="index('employee-repeat')"/>
                    </xml-source>
                </section>
                <section>
                    <title>Inserting Rows with the <code>xforms:insert</code> Action</title>
                    <p>
                        <code>xforms:insert</code> has a <code>nodeset</code> attribute
                        pointing to the homogenous collection into which the insertion must take
                        place. <code>xforms:insert</code> then considers the <i>last</i> element of
                        that collection (and all its content if any) as a <i>template</i> for the
                        new element to insert: it duplicates it and inserts it into the homogenous
                        collection at a position you specify. The last element of an homogeneous
                        collection therefore always acts as a <i>template</i> for insertions:
                    </p>
                    <xml-source show-namespaces="false">
                        <comment> This inserts a copy of the template before the last element of the collection </comment>
                        <xforms:insert nodeset="employees" at="last()" position="before"/>
                        <comment> This inserts a copy of the template after the last element of the collection </comment>
                        <xforms:insert nodeset="employees" at="last()" position="after"/>
                        <comment> This inserts a copy of the template before the first element of the collection </comment>
                        <xforms:insert nodeset="employees" at="1" position="before"/>
                        <comment> This inserts a copy of the template after the first element of the collection </comment>
                        <xforms:insert nodeset="employees" at="1" position="after"/>
                        <xforms:insert nodeset="employees" at="last()" position="after"/>
                        <comment> This inserts a copy of the template before the currently selected element of the collection </comment>
                        <xforms:insert nodeset="employees" at="index('employee-repeat')" position="before"/>
                        <comment> This inserts a copy of the template after the currently selected element of the collection </comment>
                        <xforms:insert nodeset="employees" at="index('employee-repeat')" position="after"/>
                    </xml-source>
                    <p>
                        The <code>at</code> attribute contains an XPath expression returning the
                        index of the element before or after which the insertion must be performed.
                        The <code>position</code> element contains either <code>after</code> or
                        <code>before</code>, and specifies whether the insertion is performed before
                        or after the element specified by the <code>at</code> attribute.
                    </p>
                    <p>
                        It is important to note that while it is possible to delete the last element
                        of an homogeneous collection, it becomes then impossible to insert a new
                        element into that collection with XForms 1.0, since there is no longer a
                        template element available in this case (save for using an XML submission
                        with <code>replace="instance"</code>). This means that in general you will
                        want to have at least one element in your collections.
                    </p>
                    <p>
                        In case you want the user interface to visually appear empty empty when
                        there is "no more" elements in the collection, you can use the tip provided
                        below, which can be used in most situations. The idea is to consider that
                        the last element of the collection is never displayed, but always used as a
                        template for <code>xforms:insert</code>:
                    </p>
                    <xml-source>
                        <xforms:instance id="employees-instance">
                            <employees>
                                <employee>
                                    <first-name>Alice</first-name>
                                </employee>
                                <employee>
                                    <first-name>Bob</first-name>
                                </employee>
                                <employee>
                                    <first-name>Marie</first-name>
                                </employee>
                                <comment> This is a template used by xforms:insert </comment>
                                <employee>
                                    <first-name/>
                                </employee>
                            </employees>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        You do not want to display that template, however. Therefore you use an
                        <code>xforms:repeat</code> element of the form:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:repeat nodeset="instance('employees-instance')/employee[position() &amp;lt; last()]">
                            ...
                        </xforms:repeat>
                    </xml-source>
                    <p>
                        The <code>position() &amp;lt; last()</code> condition tells
                        <code>xforms:repeat</code> to consider all the elements of the collection
                        except the last one. This causes the repetition to display zero iteration
                        when there is one element in the collection, one iteration when there are
                        two, etc. The <code>xforms:insert</code> action, on the other hand, operates
                        on the entire collection including the last element, so that that element
                        can be duplicated:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:insert nodeset="employees" at="..." position="..."/>
                    </xml-source>
                    <p>
                        Another solution involves using an <code>xforms:bind</code> element which
                        makes the last element of the collection non-relevant. This achieves the
                        same result, but requires extra code, so the tip above is usually
                        preferred.
                    </p>
                    <p>
                        Upon submission, some care must be taken with repeat template. For example,
                        if the <code>first-name</code> element above is required, and the template
                        contains an empty value as above, submission will fail.
                        <code>xforsm:bind</code> statements must then also exclude the last element
                        of the collection:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:bind nodeset="employee[position() &amp;lt; last()]/first-name" required="true()"/>
                    </xml-source>
                    <note>
                        <p>
                            If you are dealing with an XML document format which requires
                            removing the last element of a collection, you have to post-process
                            your XForms instance to remove such extra elements, and pre-process
                            it to add such elements when initializing your XForms instance.
                        </p>
                    </note>
                </section>
                <!--
                <section>
                    <title>Setting the Current Index with the <code>xforms:setindex</code> Action</title>
                    <p>
                        TODO
                    </p>
                </section>
                -->
                <section>
                    <title>Using <code>xforms:trigger</code> to Execute Actions</title>
                    <p>
                        Insertions and deletions are typically performed when the user of the
                        application presses a button, with the effect of adding a new repeated
                        element before or after the currently selected element, or of deleting the
                        currently selected element. You use an <code>xforms:trigger</code> control
                        and the XPath <code>index()</code> function for that purpose:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:trigger>
                            <xforms:label>Add</xforms:label>
                            <xforms:action ev:event="DOMActivate">
                                <xforms:insert nodeset="employees" at="index('employee-repeat')" position="after"/>
                            </xforms:action>
                        </xforms:trigger>
                    </xml-source>
                    <p>
                        or:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:trigger>
                            <xforms:label>Delete</xforms:label>
                            <xforms:action ev:event="DOMActivate">
                                <xforms:delete nodeset="employees" at="index('employee-repeat')"/>
                            </xforms:action>
                        </xforms:trigger>
                    </xml-source>
                    <p>
                        Note that we use <code>xforms:action</code> as a container for
                        <code>xforms:insert</code> and <code>xforms:delete</code>. Since there is
                        only one action to execute, <code>xforms:action</code> is not necessary, but
                        it may increase the legibility of the code. It is also possible to write:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:trigger>
                            <xforms:label>Add</xforms:label>
                            <xforms:insert ev:event="DOMActivate" nodeset="employees" at="index('employee-repeat')" position="after"/>
                        </xforms:trigger>
                    </xml-source>
                    <p>
                        or:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:trigger>
                            <xforms:label>Delete</xforms:label>
                            <xforms:delete ev:event="DOMActivate" nodeset="employees" at="index('employee-repeat')"/>
                        </xforms:trigger>
                    </xml-source>
                    <p>
                        Notice in that case how <code>ev:event="DOMActivate"</code> has been moved
                        from the enclosing <code>xforms:action</code> to the
                        <code>xforms:insert</code> and <code>xforms:delete</code> elements.
                    </p>
                </section>
                <!--
                <section>
                    <title>Events</title>
                    <p>
                        TODO
                    </p>
                </section>
                -->
                <!--
                <section>
                    <title>Heterogeneous-Looking Repeated Section</title>
                    <p>
                        TODO: use of relevant, switch.
                    </p>
                </section>
                -->
                <a name="xforms-nested-repeats"/>
                <section>
                    <title>Nested Repeats</title>
                    <p>
                        It is often desirable to nest repeat sections. Consider the following
                        XForms instance representing a company containing departments, each
                        containing a number of employees:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:instance id="departments">
                            <departments>
                                <department>
                                    <name>Research and Development</name>
                                    <employees>
                                        <employee>
                                            <first-name>John</first-name>
                                        </employee>
                                        <employee>
                                            <first-name>Mary</first-name>
                                        </employee>
                                    </employees>
                                </department>
                                <department>
                                    <name>Support</name>
                                    <employees>
                                        <employee>
                                            <first-name>Anne</first-name>
                                        </employee>
                                        <employee>
                                            <first-name>Mark</first-name>
                                        </employee>
                                        <employee>
                                            <first-name>Sophie</first-name>
                                        </employee>
                                    </employees>
                                </department>
                            </departments>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        This document clearly contains two nested sections subject to repetition:
                    </p>
                    <ul>
                        <li>
                            <p>
                                <b>Departments:</b> a node-set containing all the
                                <code>department</code> elements can be referred to with the
                                following XPath expression:
                                <code>instance('departments')/department</code>.
                            </p>
                        </li>
                        <li>
                            <p>
                                <b>Employees:</b> a node-set containing all the
                                <code>employee</code> elements can be referred to with the following
                                XPath expression:
                                <code>instance('departments')/department/employees/employee</code>.
                                However, if the <i>context node</i> of the XPath expression points
                                to a particular <code>department</code> element, then the following
                                <i>relative</i> XPath expression refers to all the
                                <code>employee</code> elements under that <code>department</code>
                                element: <code>employees/employee</code>.
                            </p>
                        </li>
                    </ul>
                    <p>
                        Following the example above, here is how departments and employees can be
                        represented in nested tables with XForms:
                    </p>
                    <xml-source show-namespaces="false">
                        <xhtml:table>
                            <xforms:repeat nodeset="instance('departments')/department">
                                <xhtml:tr>
                                    <xhtml:td>
                                        <xforms:output ref="name"/>
                                    </xhtml:td>
                                    <xhtml:td>
                                        <xhtml:table>
                                            <xforms:repeat nodeset="employees/employee">
                                                <xhtml:tr>
                                                    <xhtml:td>
                                                        <xforms:output ref="first-name"/>
                                                    </xhtml:td>
                                                </xhtml:tr>
                                            </xforms:repeat>
                                        </xhtml:table>
                                    </xhtml:td>
                                </xhtml:tr>
                            </xforms:repeat>
                        </xhtml:table>
                    </xml-source>
                </section>
                <p>
                    In the code above, the second <code>xforms:repeat</code>'s <code>nodeset</code>
                    expression is interpreted relatively to the <code>department</code> element of
                    the parent <code>xforms:repeat</code> for each iteration of the parent's
                    repetition. During the first iteration of the parent, the "Research and
                    Development" department is in scope, and <code>employees/employee</code> refers
                    to the two employees of that department, John and Mary. During the second
                    iteration of the parent, the "Support" department is in scope, and
                    <code>employees/employee</code> refers to the three employees of that
                    department, Anne, Mark and Sophie.
                </p>
            </section>
            <a name="xforms-actions"/>
            <section>
                <title>Actions</title>
                <a name="xforms-setvalue"/>
                <section>
                    <title>Setting Instance Values with the <code>xforms:setvalue</code> Action</title>
                    <p>
                        There are two ways of providing the value to set with
                        <code>&lt;xforms:setvalue></code>. The first one specifies the value as a
                        literal enclosed in the <code>&lt;xforms:setvalue></code> element. The
                        second possibility uses the <code>value</code> attribute: the content of the
                        attribute is an XPath expression evaluated in the context of the node the
                        <code>xforms:setvalue</code> element is bound (through the <code>ref</code>
                        attribute). The content of the node pointed to by the <code>ref</code>
                        attribute will be set with the result of the XPath expression provided in
                        the <code>value</code> attribute. The example below and uses two
                        <code>&lt;xforms:setvalue></code>, each one providing the new value in a
                        different way.
                    </p>
                    <xml-source>
                        <xforms:trigger>
                            <xforms:label>Submit</xforms:label>
                            <xforms:action ev:event="DOMActivate">
                                <xforms:setvalue ref="clicked">my-button</xforms:setvalue>
                                <xforms:setvalue ref="flavor" value="concat('van', 'illa')"/>
                            </xforms:action>
                        </xforms:trigger>
                    </xml-source>
                </section>
                <a name="xforms-message"/>
                <section>
                    <title>Displaying Message with the <code>xforms:message</code> Action</title>
                    <p>
                        The XForms message action displays a message to the user. OPS being a
                        server-side XForms implementation. <img print-format="pdf"
                        src="pages/reference-xforms-message.png" style="clear: both; float: right"/>
                    </p>
                    <p>
                        Typically, the content of the <code>message</code> element is the message to
                        render. It can also come from the binding attributes (<code>ref</code> or
                        <code>bind</code>), or from the linking attribute (<code>src</code>). The order
                        of preference is the following:
                    </p>
                    <ul>
                        <li>Binding attributes</li>
                        <li>Linking attribute</li>
                        <li>Inline text</li>
                    </ul>
                    <note>
                        <ul>
                            <li>The only value currently supported for the <code>level</code>
                            attribute is <code>modal</code>. This attribute is optional.</li>
                            <li>When using the linking attribute (<code>src</code>), the value must
                            be an absolute URL, starting with <code>oxf:</code>, <code>http:</code>
                            or other supported protocols.</li>
                        </ul>
                    </note>
                    <xml-source show-namespaces="false">
                        <xforms:trigger>
                            <xforms:label>Test</xforms:label>
                            <xforms:message ev:event="DOMActivate" ref="taste"/>
                        </xforms:trigger>
                    </xml-source>
                </section>
            </section>
            <a name="xforms-submission"/>
            <section>
                <title>Submission</title>
                <p>
                    Two properties control some aspects of XForms submission in OPS:
                </p>
                <xml-source>
                    <property as="xs:boolean" name="oxf.xforms.optimize-post-all" value="true"/>
                </xml-source>
                <p>
                    If set to <code>true</code> (the default), OPS optimizes submissions with
                    <code>replace="all"</code> by sending the response of the submission directly to
                    the web browser. This however means that submission errors cannot be caught by
                    XForms event handlers after OPS has started connecting to the submission URL,
                    as should be the case following XForms 1.0. If set to <code>false</code>, OPS
                    buffers the reply so that errors can be handled as per XForms 1.0. However, this
                    solution is less efficient.
                </p>
                <xml-source>
                    <property as="xs:boolean" name="oxf.xforms.optimize-local-submission" value="true"/>
                </xml-source>
                <ul>
                    <li>
                        If set to <code>true</code> (the default), OPS optimizes "local" HTTP and
                        HTTPS submissions, i.e. submissions performed to a URL controlled by OPS
                        itself, by directly submitting using the Java Servlet API instead of
                        actually using the HTTP protocol for the submission.
                    </li>
                    <li>
                        If set to <code>false</code>, OPS always always uses the HTTP or HTTPS
                        protocol, which is less efficient. In this case, it is possible to specify
                        the <code>xxforms:post</code> method instead of the <code>post</code> method
                        on the <code>xforms:submission</code> element to force an optimized local
                        submission.
                    </li>
                </ul>
            </section>
            <!--
            <a name="xforms-switch"/>
            <section>
                <title>The XForms Switch Module</title>
                <p>
                    TODO
                </p>
            </section>
            -->
        </section>
        <section>
            <title>Formatting</title>
            <section>
                <title>Rationale</title>
                <p>
                    It is usually recommended to use native XML types within XForms instances, as
                    this guarantees interoperability and maintainability. For example, a date of
                    January 10, 2005 is stored in ISO format as: <code>2005-10-01</code>. However it
                    is often necessary to format such values on screen in a user-readable format,
                    like "January 10, 2005", "10 janvier 2005", or "10. Januar 2005".
                </p>
                <p>
                    OPS provides an extension attribute, <code>xxforms:format</code>, for that
                    purpose. <code>xxforms:format</code> must contain an XPath 2.0 expression. In
                    your XPath expression you can use all the XPath 2.0 functions, including those
                    for date manipulation (<a
                    href="http://www.w3.org/TR/2005/CR-xpath-functions-20051103/#durations-dates-times">external
                    documentation</a>). However since XPath 2.0 functions don't provide any facility
                    for date and time formatting, you can in this attribute also use the following
                    XSLT 2.0 functions:
                </p>
                <ul>
                    <li><p><code>format-date()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-date">external documentation</a>)</p></li>
                    <li><p><code>format-dateTime()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-dateTime">external documentation</a>)</p></li>
                    <li><p><code>format-time()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-time">external documentation</a>)</p></li>
                    <li><p><code>format-number()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-number">external documentation</a>)</p></li>
                </ul>
                <p>
                    The XPath expression is evaluated by the XForms engine whenever the value bound
                    to the <code>xforms:input</code> control changes and needs to be updated on
                    screen. It is evaluated in the context of the instance node bound to the
                    control. This means that the current value of the control can be accessed with
                    "<code>.</code>". Often the value must be converted, for example to a date, in
                    which case the conversion can be done with XPath 2.0 type casts such as
                    <code>xs:date(.)</code>.
                </p>
            </section>
            <section>
                <title>xforms:input</title>
                <p>
                    When using <code>xforms:input</code> and a bound <code>xs:date</code> type, you
                    can control the formatting of the date using the <code>xxforms:format</code>
                    extension attribute on the <code>xforms:input</code> control. For example:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:input ref="date" xxforms:format="format-date(xs:date(.), '[MNn] [D], [Y]', 'en', (), ())"/>
                </xml-source>
            </section>
            <section>
                <title>xforms:output</title>
                <p>
                    When using <code>xforms:output</code>, you can control the formatting of the
                    date using the <code>xxforms:format</code> extension attribute on the
                    <code>xforms:input</code> control.
                </p>
                <xml-source show-namespaces="false">
                    <xforms:output ref="date" xxforms:format="format-date(xs:date(.), '[MNn] [D], [Y]', 'en', (), ())"/>
                    <xforms:output ref="size" xxforms:format="format-number(., '###,##0')"/>
                </xml-source>
            </section>
            <section>
                <title>Default Formatting</title>
                <p>
                    For both <code>xforms:input</code> and <code>xforms:output</code>, if the bound
                    node is of type <code>xs:date</code>, <code>xs:dateTime</code> or
                    <code>xs:time</code>, and if no <code>xxforms:format</code> attribute is present
                    on the control, formatting is based on <a
                    href="reference-properties">properties</a>. If the properties are missing, a
                    built-in default formatting is used. The default properties, as well as the
                    built-in defaults, are as follows:
                </p>
                <xml-source>
                    <property as="xs:string"  name="oxf.xforms.format.date"                          value="if (. castable as xs:date) then format-date(xs:date(.), '[FNn] [MNn] [D], [Y]', 'en', (), ()) else ."/>
                    <property as="xs:string"  name="oxf.xforms.format.dateTime"                      value="if (. castable as xs:dateTime) then format-dateTime(xs:dateTime(.), '[FNn] [MNn] [D], [Y] [H01]:[m01]:[s01] UTC', 'en', (), ()) else ."/>
                    <property as="xs:string"  name="oxf.xforms.format.time"                          value="if (. castable as xs:time) then format-time(xs:time(.), '[H01]:[m01]:[s01] UTC', 'en', (), ()) else ."/>
                </xml-source>
                <p>
                    They produce results as follows:
                </p>
                <ul>
                    <li>
                        <p>
                            <code>2004-01-07</code> is displayed as <code>Wednesday January 7, 2004</code>
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>2004-01-07T04:38:35.123</code> is displayed as <code>Wednesday January 7, 2004 04:38:35 UTC</code>
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>04:38:35.123</code> is displayed as <code>04:38:35 UTC</code>
                        </p>
                    </li>
                </ul>
                <p>
                    Note that with the condition in the XPath expressions, a value which cannot be
                    converted to the appropriate type is simply displayed as is.
                </p>
            </section>
        </section>
        <a name="xforms-instance-initialization"/>
        <section>
            <title>XForms Instance Initialization</title>
            <section>
                <title>Rationale</title>
                <p>
                    An XForms page often needs to contain initial data when first loaded. The data
                    may come from a database, a form submitted on a previous page, etc. There are
                    several ways to achieve this with OPS.
                </p>
            </section>
            <section>
                <title>Page Flow Definitions</title>
                <p>
                    Within your page flow, you define a page model and either a static page view:
                </p>
                <xml-source>
                    <page id="..." path-info="..." model="my-page-model.xpl" view="my-page-view.xhtml"/>
                </xml-source>
                <p>
                    Or a dynamic XSLT page view:
                </p>
                <xml-source>
                    <page id="..." path-info="..." model="my-page-model.xpl" view="my-page-view.xsl"/>
                </xml-source>
                <p>
                    The page model is in charge of producing an XML document which is then going to
                    be used by the page view to initialize the XForms instance. As always with OPS,
                    the page model produces this document on its <code>data</code> output, and the
                    page view can access this document on its <code>data</code> input, as shown in
                    the following sections. This mechanism is described in details in the <a
                    href="reference-page-flow#page-model-page-view">PFC documentation</a>.
                </p>
            </section>
            <section>
                <title>Using XInclude</title>
                <p>
                    Following the MVC architecture, the PFC page model generates an XML document
                    which contains an XForms instance. A static PFC page view then includes this
                    instance using <code>xi:include</code>, as follows:
                </p>
                <xml-source show-namespaces="false">
                    <html xmlns:xforms="http://www.w3.org/2002/xforms"
                          xmlns:xi="http://www.w3.org/2001/XInclude-doc"
                          xmlns="http://www.w3.org/1999/xhtml">
                        <head>
                            <title>Summary</title>
                            <xforms:model>
                                <xforms:instance id="document-infos-instance">
                                    <comment xmlns=""> This is where the XML document produced by the page model is included </comment>
                                    <xi:include href="input:data"/>
                                </xforms:instance>
                                ...
                            </xforms:model>
                        </head>
                        <body>
                            ...
                        </body>
                    </html>
                </xml-source>
                <p>
                    The use of the URI <code>input:data</code> instructs XInclude processing to
                    dynamically include the <code>data</code> output of the page view, which is
                    produced on the <code>data</code> output of the page model. Note that it is
                    possible to use the <code>instance</code> input, which then refers to the
                    current XML submission.
                </p>
            </section>
            <section>
                <title>Using XSLT</title>
                <p>
                    It is also possible to use a dynamic XSLT page view to perform the inclusion of
                    the instance. XSLT is more flexible than XInclude, but less efficient at
                    runtime. This is an example:
                </p>
                <xml-source show-namespaces="false">
                    <html xmlns:xforms="http://www.w3.org/2002/xforms"
                          xmlns="http://www.w3.org/1999/xhtml"
                          xsl:version="2.0">
                        <head>
                            <title>Summary</title>
                            <xforms:model>
                                <xforms:instance id="document-infos-instance">
                                    <comment xmlns=""> This is where the XML document produced by the page model is included </comment>
                                    <xsl:copy-of select="doc('input:data')/*"/>
                                </xforms:instance>
                                ...
                            </xforms:model>
                        </head>
                        <body>
                            ...
                        </body>
                    </html>
                </xml-source>
                <p>
                    Note the use of <code>xsl:version="2.0"</code> on the root element of the
                    document, which instructs the PFC to process the page view as an XSLT
                    stylesheet.
                </p>
                <p>
                    The use of the XPath <code>doc()</code> function with a URI
                    <code>input:data</code> instructs XSLT processing to dynamically include the
                    <code>data</code> output of the page view, which is produced on the
                    <code>data</code> output of the page model.
                </p>
                <note>
                    It is possible to use XInclude instructions in a dynamic XSLT page view as well.
                    In this case, it is important to note that XInclude instructions are processed
                    before XSLT instructions, i.e. the result of XInclude instructions is an XSLT
                    stylesheet, which is then executed.

                    <!--[TODO: Figure showing XInclude -> XSLT processing.]-->
                </note>
                <note>
                    Using XSLT for page views has an impact for debugging, as the output of XSLT
                    transformations do not contain valuable location information. For performance
                    and ease of debugging reasons, we recommend using static XHTML views with
                    XInclude whenever possible.
                </note>
            </section>
        </section>
        <!--
        <section>
            <title>XSLT or XForms?</title>
            <p>
                There are some similarities between XSLT and XForms. XSLT can be used to extract
                data from an XML document, format it, and output it with <code>xsl:value-of</code>.
                XForms can do the same using <code>xforms:output</code>.
            </p>
            <p>
                TODO
            </p>
        </section>
        -->
        <a name="xforms-relative-paths"/>
        <section>
            <title>Relative Paths</title>
            <section>
                <title>Rationale</title>
                <p>
                    XForms documents can refer to external resources using URIs in the following
                    circumstances:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>External Instances.</b> The <code>xforms:instance</code> element
                            can have an <code>src</code> attribute linking to an external instance
                            definition.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Submission.</b> The <code>xforms:submission</code> element must refer
                            to an <code>action</code> URI.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Load Action.</b> The <code>xforms:load</code> action must refer to an
                            URI that must be loaded upon execution.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Image Mediatype.</b> The <code>xforms:output</code> control may refer
                            to an image URI.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Message, Label, Help, Hint, and Alert.</b>
                            <code>xforms:label</code>, <code>xforms:help</code>,
                            <code>xforms:hint</code>, and <code>xforms:alert</code> may use an
                            <code>src</code> attribute to refer to external content.
                        </p>
                        <note>
                            The XForms 1.1 draft of November 15, 2004 removes linking attributes
                            from actions and metadata elements and "the <code>src</code> attribute
                            is not available to XForms 1.1 <code>message</code>, <code>label</code>,
                            <code>help</code>, <code>hint</code>, <code>alert</code> elements."
                        </note>
                    </li>
                </ul>
                <p>
                    URIs are resolved relatively to a <i>base URI</i>. The base URI is, by default,
                    the external URL used to display the XForms page, with special handling of the
                    servlet context, if necessary. It is also possible to override this behavior by
                    adding <code>xml:base</code> attributes on <code>xforms:load</code> or any of
                    its ancestor elements.
                </p>
                <!--<p>-->
                    <!--As a general rule, for URLs relative to the :-->
                <!--</p>-->
                <!--<ul>-->
                    <!--<li>-->
                        <!--<p>-->
                            <!--Absolute URLs (starting with a protocol or scheme) are used as is.-->
                        <!--</p>-->
                    <!--</li>-->
                    <!--<li>-->
                        <!--<p>-->
                            <!--Absolute paths (starting with a "/") are relative-->
                        <!--</p>-->
                    <!--</li>-->
                    <!--<li>-->
                        <!--<p>-->
<!-- -->
                        <!--</p>-->
                    <!--</li>-->
                <!--</ul>-->
            </section>
            <a name="xforms-relative-paths-external-instances"/>
            <section>
                <title>External XForms Instances</title>
                <p>
                    Referring to external XForms instances is done with the <code>src</code>
                    attribute on the <code>xforms:instance</code> element:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:instance src="instance.xml"/>
                </xml-source>
                <p>
                    This feature allows for improved modularity by separating an XForms instance
                    definition from an XHTML page. It also allows for producing XForms instances
                    dynamically.
                </p>
                <p>
                    The following assumes that OPS runs in the /ops servlet context:
                </p>
                <table>
                    <tr>
                        <th>Base URI<br/>(External URL or <code>xml:base</code> attributes)</th>
                        <th>Initial URI<br/>(<code>src</code> attribute)</th>
                        <th>Resolved URI</th>
                        <th>Comment</th>
                    </tr>
                    <tr>
                        <td rowspan="3">
                            <p>The following URI is loaded in a servlet:</p>
                            <p>
                                <code>http://a.org/ops/page</code>
                            </p>
                        </td>
                        <td><code>http://b.com/instance</code></td>
                        <td><code>http://b.com/instance</code></td>
                        <td>
                            Absolute URLs are left untouched.
                        </td>
                    </tr>
                    <tr>
                        <td><code>/new-instance</code></td>
                        <td><code>http://a.org/ops/new-instance</code></td>
                        <td>
                            Absolute paths resolve against the current servlet context.
                        </td>
                    </tr>
                    <tr>
                        <td><code>admin/instance</code></td>
                        <td><code>http://a.org/ops/admin/instance</code></td>
                        <td>
                            The relative path resolves against the original URL.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="3">
                            <p>The following path is loaded in a portlet:</p>
                            <p>
                                <code>/example/page</code>
                            </p>
                        </td>
                        <td><code>http://b.com/instance</code></td>
                        <td><code>http://b.com/instance</code></td>
                        <td>
                            Absolute URLs are left untouched.
                        </td>
                    </tr>
                    <tr>
                        <td><code>/new-instance</code></td>
                        <td><code>/new-instance</code></td>
                        <td>
                            The absolute path is used as is. The XForms instance is loaded from the
                            portlet. The developer must make sure that the path resolves to a PFC
                            entry producing XML.
                        </td>
                    </tr>
                    <tr>
                        <td><code>admin/instance</code></td>
                        <td><code>/example/admin/instance</code></td>
                        <td>
                            The relative path is resolved against the original path. The XForms
                            instance is loaded from the portlet. The developer must make sure that
                            the path resolves to a PFC entry producing XML.
                        </td>
                    </tr>
                </table>
            </section>
            <a name="xforms-relative-paths-submission"/>
            <section>
                <title>XForms Submisssion</title>
                <p>
                    Specifying a submission URL is done with the <code>action</code>
                    attribute on the <code>xforms:submission</code> element:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:submission action="/submission" ref="..."/>
                </xml-source>
                <p>
                    The following assumes that OPS runs in the /ops servlet context:
                </p>
                <table>
                    <tr>
                        <th>Base URI<br/>(External URL or <code>xml:base</code> attributes)</th>
                        <th>Initial URI<br/>(<code>action</code> attribute)</th>
                        <th>XForms Init <sup>1</sup></th>
                        <th>Resolved URI</th>
                        <th>Comment</th>
                    </tr>
                    <tr>
                        <td rowspan="3">
                            <p>The following URI is loaded in a servlet:</p>
                            <p>
                                <code>http://a.org/ops/page</code>
                            </p>
                        </td>
                        <td><code>http://b.com/submission</code></td>
                        <td>N/A</td>
                        <td><code>http://b.com/submission</code></td>
                        <td>
                            The absolute URL is left untouched. The XForms submission is performed
                            on the absolute URL.
                        </td>
                    </tr>
                    <tr>
                        <td><code>/new-submission</code></td>
                        <td>N/A</td>
                        <td><code>http://a.org/ops/new-submission</code></td>
                        <td>
                            Absolute paths resolve against the current servlet context.
                        </td>
                    </tr>
                    <tr>
                        <td><code>admin/submission</code></td>
                        <td>N/A</td>
                        <td><code>http://a.org/ops/admin/submission</code></td>
                        <td>
                            The relative path resolves against the original URL.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="5">
                            <p>The following path is loaded in a portlet:</p>
                            <p>
                                <code>/example/page</code>
                            </p>
                        </td>
                        <td><code>http://b.com/submission</code></td>
                        <td>N/A</td>
                        <td><code>http://b.com/submission</code></td>
                        <td>
                            The absolute URL is left untouched. The XForms submission is performed
                            on the absolute URL.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="2"><code>/new-submission</code></td>
                        <td>Yes</td>
                        <td><code>/new-submission</code></td>
                        <td>
                            The absolute path is used as is. The XForms submission is performed on
                            the portlet.
                        </td>
                    </tr>
                    <tr>
                        <td>No</td>
                        <td><code>http://a.org/ops/new-submission</code></td>
                        <td>
                            The absolute path resolves against the current servlet context. The
                            submission is performed on the web application.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="2"><code>admin/submission</code></td>
                        <td>Yes</td>
                        <td><code>/example/admin/submission</code></td>
                        <td>
                            The relative path is resolved against the original path. The XForms
                            submission is performed on the portlet.
                        </td>
                    </tr>
                    <tr>
                        <td>No</td>
                        <td><code>http://a.org/ops/ example/admin/submission</code></td>
                        <td>
                            The relative path resolves against the original path, then against the
                            the current servlet context. The submission is performed on the web
                            application.
                        </td>
                    </tr>
                </table>
                <p>
                    <sup>1</sup> If "yes", this means the submission is performed during XForms
                    initialization, for example upon an <code>xforms-ready</code> event. If "no",
                    this means that the submission is performed after XForms initialization, for
                    example upon the user activating a trigger.
                </p>
            </section>
            <a name="xforms-relative-paths-load-action"/>
            <section>
                <title>XForms Load Action</title>
                <p>
                    The <code>xforms:load action</code> can refer to a resource to load either
                    through the <code>resource</code> attribute or using a single-node binding
                    retrieving the URI from an XForms instance. In both cases, the value of the URI
                    is resolved relatively to the base URI.
                </p>
                <p>
                    The following assumes that OPS runs in the <code>/ops</code> servlet context:
                </p>
                <table>
                    <tr>
                        <th>Base URI<br/>(External URL or <code>xml:base</code> attributes)</th>
                        <th>Initial URI<br/>(<code>resource</code> or Single-Node Binding)</th>
                        <th><code>show</code><br/><code>f:url-type</code></th>
                        <th>Resolved URI</th>
                        <th>Comment</th>
                    </tr>
                    <tr>
                        <td rowspan="6">
                            <p>The following URI is loaded in a servlet:</p>
                            <p>
                                <code>http://a.org/ops/page</code>
                            </p>
                        </td>
                        <td rowspan="2"><code>http://b.com/software/</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>http://b.com/software/</code></td>
                        <td>
                            The absolute URL is left untouched. The new page replaces the existing
                            page.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td>
                            The absolute URL is left untouched. A new window or tab opens for the new
                            page.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="2"><code>/new-page</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>http://a.org/ops/new-page</code></td>
                        <td>
                            Absolute paths resolve against the current servlet context. The new page
                            replaces the existing page.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td>
                            Absolute paths resolve against the current servlet context. A new window
                            or tab opens for the new page.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="2"><code>admin/main-page</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>http://a.org/ops/admin/main-page</code></td>
                        <td>
                            The new page replaces the existing page.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td>
                            A new window or tab opens for the new page.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="8">
                            <p>The following path is loaded in a portlet:</p>
                            <p>
                                <code>/example/page</code>
                            </p>
                        </td>
                        <td rowspan="2"><code>http://b.com/software/</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>http://b.com/software/</code></td>
                        <td>
                            This causes the application to load a page outside of the portlet,
                            replacing the entire portal.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td>
                            This causes the application to load a page in a new window outside of
                            the portlet.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="3"><code>/new-page</code></td>
                        <td><code>replace</code></td>
                        <td><code>/new-page</code></td>
                        <td>
                            The resulting path is loaded within the portlet.
                        </td>
                    </tr>
                    <tr>
                        <td><code>replace</code><br/><code>f:url-type="resource"</code></td>
                        <td><code>http://a.org/ops/new-page</code></td>
                        <td>
                            The resulting path is loaded in the same window outside the portal.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td><code>http://a.org/ops/new-page</code></td>
                        <td>
                            The resulting path is loaded in a new window.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="3"><code>admin/main-page</code></td>
                        <td><code>replace</code></td>
                        <td><code>/example/admin/main-page</code></td>
                        <td>
                            The resulting path is loaded within the portlet.
                        </td>
                    </tr>
                    <tr>
                        <td><code>replace</code><br/><code>f:url-type="resource"</code></td>
                        <td><i>undefined</i></td>
                        <td><i>undefined</i></td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td><i>undefined</i></td>
                        <td><i>undefined</i></td>
                    </tr>
                </table>
            </section>
            <a name="xforms-relative-paths-image-mediatype"/>
            <section>
                <title>Image Mediatype for <code>xforms:output</code></title>
                <p>
                    When an <code>xforms:output</code> control refers to an image URI, as documented
                    <a href="#image-mediatype">below</a>, the resulting value is resolved
                    relatively to the base URI.
                </p>
            </section>
        </section>
        <!--
        <section>
            <title>Labels, Hints, Alerts, Help Messages</title>
            <p>
                TODO: explain purpose, styling, content allowed (xforms:output), and when e.g.
                labels should not be used.
            </p>
        </section>
        -->
        <!--
        <section>
            <title>Using XML Schema for Validation</title>
            <p>
                TODO: basics, additional XForms constraints, tips for repeating elements
            </p>
        </section>
        -->
        <section>
            <title>XForms and Services</title>
            <section>
                <title>Introduction</title>
                <p>
                    XForms 1.0 allows an XForms page to perform submissions of XForms instances and
                    to handle a response. In most cases, both the submitted XForms instance and the
                    response are XML documents.
                </p>
                <note>
                    It is possible to submit an XForms instance with the HTTP GET method. In that
                    case, some information contained in the XML document is lost, as the structure
                    of the instance, attributes, and namespace prefixes among others, are not passed
                    to the submission.
                </note>
                <p>
                    The XForms submission feature practically allows forms to call XML services.
                    Those services are accessible through an XML API, which means that a request is
                    performed by sending an XML document to the service, and a response consists of
                    an XML document as well.
                </p>
            </section>
            <!--
            <section>
                <title>Calling Services</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>Handling Responses</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>Implementing Services with OPS</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>Page Flow Controller (PFC) Best Practices</title>
                <p>
                    TODO
                </p>
            </section>
            -->
        </section>
        <a name="extensions"/>
        <section>
            <title>Extensions</title>
            <a name="xforms11-extensions"/>
            <section>
                <title>XForms 1.1 Extensions</title>
                <section>
                    <title>Media Type for <code>xforms:output</code></title>
                    <p>
                        In XForms 1.0, <code>xforms:output</code> is used to display text. However,
                        based on a proposal in a draft version of XForms 1.1, OPS supports a
                        <code>mediatype</code> attribute on that element.
                    </p>
                    <a name="xforms-image-mediatype"/>
                    <section>
                        <title>Image Types</title>
                        <p>
                             For the <code>&lt;xforms:output></code> control to display an image, you
                             need to:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    Have a <code>mediatype</code> attribute on the
                                    <code>&lt;xforms:output></code>. That attribute must refer to an
                                    image, such as <code>image/*</code> or <code>image/jpeg</code>.
                                </p>
                            </li>
                           <li>
                                <p>
                                    Use the <code>value</code> attribute on
                                    <code>&lt;xforms:output></code> or bind to the control to a node
                                    without type or with an <code>xs:anyURI</code> type.
                                </p>
                            </li>
                       </ul>
                        <p>
                            The resulting value is interpreted a URI pointing to an image. The image
                            will display in place of the <code>xforms:output</code>. When a single-node
                            binding is used, it is possible to dynamically change the image pointed to.
                            For example:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:output mediatype="image/*" value="'/images/moon.jpg'"/>
                        </xml-source>
                        <xml-source show-namespaces="false">
                            <xforms:model>
                                <xforms:instance>
                                    <image-uri/>
                                </xforms:instance>
                                <xforms:bind nodeset="image-uri" type="xs:anyURI"/>
                            </xforms:model>
                            ...
                            <xforms:output mediatype="image/*" ref="image-uri"/>
                        </xml-source>
                        <note>
                            It is not yet possible to directly embed image data in an XForms instance
                            using the <code>xs:base64Binary</code> type.
                        </note>
                    </section>
                    <section>
                        <title>HTML Type</title>
                        <p>
                            When an <code>xforms:output</code> control has a <code>mediatype</code>
                            attribute with value <code>text/html</code>, the value of the node to which
                            the control is bound is interpreted as HTML content. Consider the following
                            XForms instance:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:instance id="my-instance">
                                <form>
                                    <html-content>
                                        This is in &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;!
                                    </html-content>
                                </form>
                            </xforms:instance>
                        </xml-source>
                        <p>
                            You bind an <code>xforms:output</code> control to the
                            <code>html-content</code> node as follows:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:output ref="instance('my-instance')/html-content" mediatype="text/html"/>
                        </xml-source>
                        <p>
                            This will display the result as HTML, as expected: "This is in in
                            <b>bold</b>!". If the <code>mediatype</code> is not specified, the result
                            would be instead: "This is in in &lt;b>bold&lt;/b>!". In the XForms
                            instance, the HTML content must be escaped as text. On the other hand, the
                            following content will not work as expected:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:instance>
                                <form>
                                    <html-content>
                                        This is in in <b>bold</b>!
                                    </html-content>
                                </form>
                            </xforms:instance>
                        </xml-source>
                        <note>
                            When using a <code>mediatype="text/html"</code>, an HTML
                            <code>&lt;div></code> element will be generated by the XForms engine to hold
                            the HTML data. As in HTML a <code>&lt;div></code> cannot
                            be embedded into a <code>&lt;p></code>, if you have a
                            <code>&lt;xforms:output mediatype="text/html"></code> control, you should
                            not put that control into a <code>&lt;xhtml:p></code>.
                        </note>
                    </section>
                </section>
                <section>
                    <title><code>origin</code> Attribute on <code>xforms:insert</code> Action</title>
                    <p>
                        Based on a proposal in a draft version of XForms 1.1, OPS supports an
                        <code>origin</code> attribute on the <code>xforms:insert</code> action. This
                        attribute allows specifying the source node to use as template. This allows
                        storing templates separately from the node-set specified by the
                        <code>nodeset</code> attribute. For example:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:insert nodeset="address" at="last()" position="after" origin="instance('template-instance')"/>
                    </xml-source>
                    <p>
                        The template copied in this case comes from an XForms instance:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:instance id="template-instance">
                            <address>
                                <street>
                                    <number/>
                                    <name-1/>
                                    <name-2/>
                                </street>
                                <apt/>
                                <city/>
                                <state/>
                                <zip/>
                            </address>
                        </xforms:instance>
                    </xml-source>
                </section>
                <section>
                    <title><code>validate</code> and <code>relevant</code> Attributes on <code>xforms:submission</code></title>
                    <p>
                        Based on a proposal in a draft version of XForms 1.1, OPS supports the
                        <code>validate</code> and <code>relevant</code> attributes on
                        <code>xforms:submission</code>. For more information, please visit the
                        <a href="http://www.w3.org/TR/2004/WD-xforms11-20041115/#submit-attribs">XForms 1.1 draft</a>.
                    </p>
                </section>
            </section>
            <a name="xpath-extensions"/>
            <section>
                <title>XPath Extension Functions</title>
                <p>
                    OPS implements some extension functions which can be used from XPath expressions
                    in XForms documents.
                </p>
                <section>
                    <title>XSLT 2.0 Functions</title>
                    <p>
                        When using XPath 2.0, the following functions from XSLT 2.0 are also available:
                    </p>
                    <ul>
                        <li><p><code>format-date()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-date">external documentation</a>)</p></li>
                        <li><p><code>format-dateTime()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-dateTime">external documentation</a>)</p></li>
                        <li><p><code>format-time()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-time">external documentation</a>)</p></li>
                        <li><p><code>format-number()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-number">external documentation</a>)</p></li>
                    </ul>
                </section>
                <a name="ops-extensions"/>
                <section>
                    <title>OPS Functions</title>
                    <p>
                        The following functions are implemented:
                    </p>
                    <ul>
                        <li>
                            <p>
                                <code>xxforms:call-xpl($xplURL as xs:string, $inputNames as
                                xs:string*, $inputElements as element()*, $outputNames as
                                xs:string+)</code>.
                            </p>
                            <p>
                                This function lets you call an XPL pipeline.
                            </p>
                            <ol>
                                <li>
                                    The first argument, <code>$XPLurl</code>, is the URL of the
                                    pipeline. It must be an absolute URL.
                                </li>
                                <li>
                                    The second argument, <code>$inputNames</code>, is a sequence of
                                    strings, each one representing the name of an input of the
                                    pipeline that you want to connect.
                                </li>
                                <li>
                                    The third argument, <code>$inputElements</code>, is a sequence
                                    of elements to be used as input for the pipeline. The
                                    <code>$inputNames</code> and <code>$inputElements</code>
                                    sequences must have the same length. For each element in
                                    <code>$inputElements</code>, a document is created and
                                    connected to an input of the pipeline. Elements are matched to
                                    input name by position, for instance the element at position 3
                                    of <code>$inputElements</code> is connected to the input with
                                    the name specified at position 3 in <code>$inputNames</code>.
                                </li>
                                <li>
                                    The fourth argument, <code>$outputNames</code>, is a sequence
                                    of output names to read.
                                </li>
                                <li>
                                    The function returns a sequence of elements corresponding the
                                    output of the pipeline. The returned sequence will have the same
                                    length as <code>$outputNames</code> and will correspond to the
                                    pipeline output with the name specified on
                                    <code>$outputNames</code> based on position.
                                </li>
                            </ol>
                            <p>
                                The example below shows a call to the <code>xxforms:call-xpl</code>
                                function:
                            </p>
                            <xml-source>
                                xxforms:call-xpl ('oxf:/examples/sandbox/xpath/run-xpath.xpl',
                                ('input', 'xpath'), (instance('instance')/input,
                                instance('instance')/xpath), 'formatted-output')/*, 'html')
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                <code>xxforms:evaluate($xpath as xs:string)</code>.
                            </p>
                            <p>
                                The <code>xxforms:evaluate()</code> function allows you to evaluate
                                XPath expressions dynamically. For example:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:input ref="xxforms:evaluate(concat('instance(''my-instance'')/document', my-xpath))">
                                    <xforms:label>...</xforms:label>
                                </xforms:input>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                <code>xxforms:repeat-current($repeat-id as xs:string?)</code>.
                            </p>
                            <p>
                                The <code>xxforms:repeat-current()</code> function allows you to
                                obtain a reference to an enclosing <code>xforms:repeat</code>'s
                                current node. It takes one optional string parameter. If present,
                                the id of the enclosing <code>xforms:repeat</code> is searched. If
                                absent, the function looks for the closest enclosing
                                <code>xforms:repeat</code>.
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:repeat nodeset="employee" id="employee-repeat">
                                    <tr>
                                        <td>
                                            <comment> The context is being set to another instance that controls the visibility of the group. </comment>
                                            <xforms:group ref="instance('control-instance')/input">
                                                <comment> Using xxforms:repeat-current() allows reclaiming the context of the repeat iteration. </comment>
                                                <xforms:input ref="xxforms:repeat-current('employee-repeat')/name">
                                                    <xforms:label>Employee Name</xforms:label>
                                                </xforms:input>
                                            </xforms:group>
                                        </td>
                                    </tr>
                                </xforms:repeat>
                            </xml-source>
                            <p>
                                The <code>xxforms:repeat-current()</code> function must be called
                                from within an <code>xforms:repeat</code> element.
                            </p>
                        </li>
                    </ul>
                </section>
                <section>
                    <title>eXForms Functions</title>
                    <p>
                        <a href="http://www.exforms.org/">eXForms</a> is a suggested set of
                        extensions to XForms 1.0, grouped into different modules. OPS supports the
                        <a href="http://www.exforms.org/mips.html"><code>exf:mip</code></a> module,
                        which includes the following functions:
                    </p>
                    <ul>
                        <li>
                            <p><code>exf:relevant()</code></p>
                        </li>
                        <li>
                            <p><code>exf:readonly()</code></p>
                        </li>
                        <li>
                            <p><code>exf:required()</code></p>
                        </li>
                    </ul>
                    <p>
                        eXForms functions live in the <code>http://www.exforms.org/exf/1-0</code>
                        namespace, usually bound to the prefix <code>exf</code>.
                    </p>
                </section>
            </section>
        </section>
        <a name="xforms-state-handling"/>
        <section>
            <title>State Handling</title>
            <section>
                <title>Rationale</title>
                <p>
                    The OPS XForms engine requires keeping processing state while operating on an
                    XForms page. Such state includes the current values of XForms instances,
                    selected repeated elements, and more. With OPS, XForms state information can be
                    handled in one of two ways:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>Client-side:</b> in this case, static initial state information is
                            sent along with the initial HTML page, and dynamic state is exchanged
                            over the wire between the client browser and the OPS XForms server when
                            necessary.
                        </p>
                        <p>
                            Benefits of the approach:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    The OPS server is entirely stateless. It only requires memory
                                    while processing a client request. It can be restarted without
                                    consequence for the XForms engine.
                                </p>
                            </li>
                            <li>
                                <p>
                                    State information does not expire as long as the user keeps the
                                    application page open in the web browser.
                                </p>
                            </li>
                        </ul>
                        <p>
                            Drawbacks of the approach:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    Resulting HTML pages are larger. In particular, the size of
                                    state data grows when XForms instances grow, regardless of
                                    whether many XForms controls are bound to instance data.
                                </p>
                            </li>
                            <li>
                                <p>
                                    More data circulates between the client browser and the OPS
                                    XForms server.
                                </p>
                            </li>
                        </ul>
                        <note>
                            OPS compresses and encrypts XForms state information sent to the
                            client.
                        </note>
                    </li>
                    <li>
                        <p>
                            <b>Server-side:</b> in this case, state information is stored on the
                            server, in association with an application session. Only very little
                            state information circulates between client and server.
                        </p>
                        <p>
                            Benefits of the approach:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    Resulting HTML page are smaller. HTML pages increase in size as
                                    more XForms controls are used, but they don't increase in size
                                    proportionally to the size of XForms instances.
                                </p>
                            </li>
                            <li>
                                <p>
                                    Small amounts of data circulate between the client browser and
                                    the OPS XForms server.
                                </p>
                            </li>
                            <li>
                                <p>
                                    This means that very large XForms instances can be processed
                                    without any impact on the amount of data that is transmitted
                                    between the client and the server.
                                </p>
                            </li>
                        </ul>
                        <p>
                            Drawbacks of the approach:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    The OPS XForms server needs to be stateful. It uses server
                                    memory to store state information in a session even when no
                                    request is being processed. The server must be configured to
                                    determine how much state information is kept in a session, how
                                    long session take to expire, etc. This creates additional demand
                                    for resources on the server and complicates the task of
                                    tuning the server.
                                </p>
                            </li>
                            <li>
                                <p>
                                    State information can become unavailable when sessions expire or
                                    when the server is restarted (unless you setup the server to
                                    persist session information). When state information becomes
                                    unavailable for a page, that page will no longer function unless
                                    it is reloaded.
                                </p>
                                <note>
                                    With most servlet containers, it is possible to configure
                                    session handling to passivate sessions out of the application
                                    server memory to a persistent store. It is this way possible to
                                    partially alleviate the drawback above by making sure that a
                                    very large number of active but idle sessions can be kept, with
                                    a minimum impact on application server memory. It is this way
                                    also possible to make sure that sessions survive a servlet
                                    container restart.
                                </note>
                            </li>
                        </ul>
                        <note>
                            OPS ensures that it is possible to open multiple client browser windows
                            showing the same page within the same session.
                        </note>
                    </li>
                </ul>
            </section>
            <section>
                <title>Configuring State Handling</title>
                <p>
                    State handling can be configured globally for all pages, or locally for each
                    individual page served. Global configuration is performed in
                    <code>properties.xml</code> with the <code>oxf.xforms.state-handling</code>
                    property. When missing or set to <code>client</code>, state is stored
                    client-side. When set to <code>session</code>, state is stored server-side in a
                    session. For example:
                </p>
                <xml-source>
                    <comment> Store state in the session </comment>
                    <property as="xs:string"  name="oxf.xforms.state-handling" value="session"/>
                </xml-source>
                <p>
                    The global configuration can be overridden for each page by setting the
                    <code>xxforms:state-handling</code> attribute in the page. This attribute can be
                    set for example on the root element of the XHTML page, or on the first
                    <code>xforms:model</code> element. Only the first such attribute encountered by
                    the XForms engine is used:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:model xxforms:state-handling="client">
                        ...
                    </xforms:model>
                </xml-source>
                <p>
                    When storing state in a session, the maximum size of the data to be stored for
                    each user can be selected using the <code>oxf.xforms.cache.session.size</code>
                    property. The size is specified in bytes:
                </p>
                <xml-source>
                    <comment> Allow a maximum of 500 KB of state information for each user </comment>
                    <property as="xs:integer" name="oxf.xforms.cache.session.size"                   value="500000"/>
                </xml-source>
                <p>
                    Whether state information is kept client-side or server-side, a property
                    controls whether the XForms engine should try to optimize state reconstruction
                    by using a cache. This property should usually be set to <code>true</code>:
                </p>
                <xml-source>
                    <comment> This should usually be set to "true" </comment>
                    <property as="xs:boolean" name="oxf.xforms.cache.document"                       value="true"/>
                </xml-source>
            </section>
            <!--
            <section>
                <title>Handling the Browser's Back Button</title>
                <p>
                    TODO: Explain what OPS does and how different browsers behave.
                </p>
            </section>
            -->
            <!--
            <section>
                <title>Configuring Session Handling</title>
                <p>
                    This section is relevant when XForm state is stored into a session.
                </p>
                <p>
                    TODO: Configuration tips: expiration (web.xml), passivation? (Tomcat).
                </p>
                <p>
                    Session passivation can be tightly controlled with Tomcat 5.5. Please refer to
                    the <a
                    href="http://tomcat.apache.org/tomcat-5.5-doc/config/manager.html">relevant
                    Tomcat documentation</a> for more information. Other servlet containers may have
                    similar relevant documentation.
                </p>
            </section>
            -->
        </section>
        <a name="xforms-javascript"/>
        <section>
            <title>JavaScript Integration</title>
            <section>
                <title>Rationale</title>
                <p>
                    While XForms gets you a long way towards creating a dynamic user-friendly user
                    interface, there are some dynamic behaviors of the user interface that cannot be
                    implemented with XForms, and that you might want to implement directly in
                    JavaScript. We describe here how your JavaScript code can interact with XForms and
                    in particular how you can have access to the value of an XForms control.
                </p>
            </section>
            <section>
                <title>Accessing The Value XForms Controls</title>
                <p>
                    In JavaScript, you obtain a reference to the element representing the control with
                    <code>var control = document.getElementById('myControl')</code> where
                    <code>myControl</code> is the id of the XForms control (i.e. <code>&lt;xforms:input
                    id="myControl"></code>. You can read the current value of the control with
                    <code>control.value</code> and set the value of the control assigning a value to
                    <code>control.value</code>, for instance: <code>control.value = 42</code>. When you
                    do such an assignment the value of the node in the instance is updated, the
                    <code>xforms-value-changed</code> event thrown, and all the standard XForms
                    processing happens (validation, recalculation, etc).
                </p>
                <note>
                    Currently, accessing the value of a control is only supported for
                    <code>&lt;xforms:input></code>. If you want to access the value of another control,
                    a workaround consists in adding an <code>&lt;xforms:input></code> with
                    <code>style="display: none"</code> bound to the same node as that control, and
                    accessing the <code>&lt;xforms:input></code>'s id to change the value of the node
                    and therefore indirectly the other control's value.
                </note>
            </section>
        </section>
    </body>
</document>
