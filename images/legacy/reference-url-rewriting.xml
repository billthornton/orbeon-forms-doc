<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xforms="http://www.w3.org/2002/xforms">
    <header>
        <title>URL Rewriting</title>
    </header>
    <body>
        <section>
            <title>Rationale</title>
            <p>
                Traditionally, Web applications developers generate URLs in their Web pages
                manually. For example, an HTML <code>&lt;a></code> element contains an
                <code>href</code> attribute specifying the destination of a link. The default
                OPS Page Flow Controller epilogue contains a URL rewriting
                mechanism for HTML and XHTML documents.
            </p>
            <section>
                <title>Servlets</title>
                <p>
                    Absolute URLs (starting with a scheme such as <code>http:</code>) are usually
                    reserved to refer to external sites or applications. When referring to the
                    current application, relative URLs, in the form of relative paths or absolute
                    paths, are commonly used. Developers must make sure that the URL interpreted by
                    the Web browser and the application server refers to the correct page or
                    resource:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>Relative paths:</b> such paths are interpreted by the Web browser as
                            relative to a URL base, usually the URL of the page being requested,
                            unless specified differently. For example, if a browser requests
                            <code>/oxf/example1/page1</code>:
                        </p>
                        <p>
                            <table>
                                <tr>
                                    <th>Relative Path</th>
                                    <th>Resulting Absolute Path</th>
                                </tr>
                                <tr>
                                    <td><code>page2</code></td>
                                    <td><code>/oxf/example1/page2</code></td>
                                </tr>
                                <tr>
                                    <td><code>../page3</code></td>
                                    <td><code>/oxf/page3</code></td>
                                </tr>
                                <tr>
                                    <td><code>../example2/page4</code></td>
                                    <td><code>/oxf/example2/page4</code></td>
                                </tr>
                            </table>
                        </p>
                        <p>
                            Using relative paths raises the issue that if a
                            page is moved, all the links within that page have
                            to be changed.
                        </p>
                    </li>
                    <li>
                        <b>Absolute paths:</b> such paths start with a "/". The developer can
                        generate the same paths as above by directly writing the resulting absolute
                        paths. The issue with this solution is that it is necessary to write the
                        exact absolute path, often including a J2EE Web applications context path
                        such as <code>/oxf</code>. Hardcoding the context path in every URL makes it
                        impossible to change the application context without changing all the URLs
                        in the application. To alleviate this issue, developers often use relative
                        URLs, with the problem mentioned above.
                    </li>
                </ul>
            </section>
            <section>
                <title>Portlets</title>
                <p>
                    The issue is even more important with Java Portlets (JSR-168), as URLs must be
                    generated by calling a specific Java API. With page template languages such as
                    JSP, this is done using tag libraries. All the pages in an application must be
                    modified when moved from a deployment as a Servlet to a deployment as a
                    Portlet.
                </p>
            </section>
            <p>
                A solution to the issues mentioned above is to post-process all URLs
                to make the developer's life easier.
            </p>
        </section>
        <section>
            <title>Default URL Rewriting</title>
            <p>
                This section describes the default URL rewriting implementation in Presentation
                Server. It is implemented in the processors <code>oxf:xhtml-rewrite</code> and 
                <code>oxf:html-rewrite</code>.
            </p>
            <section>
                <title>What is Rewritten?</title>
                <p>
                    The <code>form</code>, <code>a</code>, <code>link</code>, <code>img</code>, and
                    <code>input</code> elements are rewritten. In addition, their XHTML counterparts
                    in the <code>http://www.w3.org/1999/xhtml</code> namespace are also rewritten.
                    URLs can be parsed by the rewriting algorithm, so developers have to make sure
                    that they are well-formed. Absolute URLs (with a scheme) are left unmodified.
                    The special case of URLs starting with a query string (e.g.
                    <code>?name=value</code>) is handled. This last syntax is supported by most Web
                    browsers and because of its convenience, it is supported by the default
                    rewriting algorithm as well.
                </p>
            </section>
            <section>
                <title>Servlets</title>
                <table ca="|p{0.3\textwidth}|p{0.7\textwidth}|">
                    <tr>
                        <th>Element / Attribute</th>
                        <th>Action</th>
                    </tr>
                    <tr>
                        <td><code>form/@action</code></td>
                        <td rowspan="6">
                            If the URL is a relative path, it is left unchanged. If the URL is an
                            absolute path, the context path is pre-pended. Absolute URLs are left
                            unchanged.
                        </td>
                    </tr>
                    <tr>
                        <td><code>a/@href</code></td>
                        <pdf-td/>
                    </tr>
                    <tr>
                        <td><code>link/@href</code></td>
                        <pdf-td/>
                    </tr>
                    <tr>
                        <td><code>img/@src</code></td>
                        <pdf-td/>
                    </tr>
                    <tr>
                        <td><code>input[@type='image']/@src</code></td>
                        <pdf-td/>
                    </tr>
                    <tr>
                        <td><code>script/@src</code></td>
                        <pdf-td/>
                    </tr>
                </table>
            </section>
            <section>
                <title>Portlets</title>
                <table ca="|p{0.3\textwidth}|p{0.7\textwidth}|">
                    <tr>
                        <th>Element / Attribute</th>
                        <th>Action</th>
                    </tr>
                    <tr>
                        <td><code>form/@action</code></td>
                        <td>
                            Rewritten to an action URL using the Portlet API method
                            <code>RenderResponse.createActionURL()</code>. The resulting URL
                            results in an action URL targeting the current portlet. Absolute URLs
                            are left unchanged.
                        </td>
                    </tr>
                    <tr>
                        <td><code>form/@method</code></td>
                        <td>
                            If no <code>form/@method</code> is supplied, an HTTP <code>POST</code>
                            is forced, because the Portlet specification recommends submitting
                            forms with <code>POST</code>. If a method is supplied, the method is
                            left unchanged.
                        </td>
                    </tr>
                    <tr>
                        <td><code>a/@href</code></td>
                        <td>
                            Rewritten to a render URL using the Portlet API method
                            <code>RenderResponse.createRenderURL()</code>. The resulting URL
                            results in a render URL targeting the current portlet. Absolute URLs
                            are left unchanged.
                        </td>
                    </tr>
                    <tr>
                        <td><code>img/@src</code></td>
                        <td rowspan="4">
                            Rewritten to a resource URL encoding. The resulting URL points to a
                            resource within your Web application. Absolute URLs are left unchanged.
                        </td>
                    </tr>
                    <tr>
                        <td><code>input[@type='image']/@src</code></td>
                        <pdf-td/>
                    </tr>
                    <tr>
                        <td><code>script/@src</code></td>
                        <pdf-td/>
                    </tr>
                    <tr>
                        <td><code>link/@href</code></td>
                        <pdf-td/>
                    </tr>
                    <tr>
                        <td><code>script</code> and <code>SCRIPT</code></td>
                        <td>
                            In text within those elements or their XHTML counterparts in the
                            <code>http://www.w3.org/1999/xhtml</code> namespace, occurrences of the
                            string <code>wsrp_rewrite_</code> are replaced with the Portlet
                            namespace as obtained by the Portlet API method
                            <code>RenderResponse.encodeNamespace(null)</code>.
                        </td>
                    </tr>
                </table>
            </section>
        </section>
        <section>
            <title>Working with URL Rewriting</title>
            <p>
                In OPS, URLs come from two different sources:
            </p>
            <ul>
                <li>
                    Within XSLT templates, for example single pages or a theme stylesheet. This is
                    the case for most URLs, including links to resources (images, CSS stylesheets,
                    JavaScript files, etc.), links to other pages, etc.
                </li>
                <li>
                    Within an XForms' <code>submission-info</code> element, to specify the action
                    to be called when a form is submitted.
                </li>
            </ul>
            <p>
                In both cases, URLs are subject to the following sections.
            </p>
            <section>
                <title>Servlets</title>
                <p>
                    URLs can be written as relative paths as usual, but they can also be written as
                    absolute paths without concerns about the context path. For example:
                </p>
                <table ca="|p{0.5\textwidth}|p{0.5\textwidth}|">
                    <tr>
                        <th>Initial Path</th>
                        <th>Resulting Path</th>
                    </tr>
                    <tr>
                        <td><code>/example1/page2</code></td>
                        <td><code>/oxf/example1/page2</code></td>
                    </tr>
                    <tr>
                        <td><code>/page3</code></td>
                        <td><code>/oxf/page3</code></td>
                    </tr>
                    <tr>
                        <td><code>/example2/page4</code></td>
                        <td><code>/oxf/example2/page4</code></td>
                    </tr>
                </table>
            </section>
            <section>
                <title>Portlets</title>
                <p>
                    With Portlets, the benefit is even greater. Write your URLs as you would in a
                    regular Servlet-based application, and the rewriting pipeline takes care of
                    calling the Portlet API to encode the URLs. Since portlets do not have the
                    concept of path, URL paths are encoded as a special parameter named
                    <code>oxf.path</code>. Relative paths are resolved against the current path. The
                    following table illustrates action URL and render URL rewriting:
                </p>
                <table ca="|p{0.5\textwidth}|p{0.5\textwidth}|">
                    <tr>
                        <th>Initial Path</th>
                        <th>Resulting Portlet Parameters</th>
                    </tr>
                    <tr>
                        <td><code>/example1/page1?name1=value1&amp;name2=value2</code></td>
                        <td>
                            <ul>
                                <li><code>oxf.path=/example1/page1</code></li>
                                <li><code>name1=value1</code></li>
                                <li><code>name2=value2</code></li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <td><code>?name1=value1&amp;name2=value2</code></td>
                        <td>
                            <ul>
                                <li><code>name1=value1</code></li>
                                <li><code>name2=value2</code></li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Assuming the current value of <code>oxf.path</code> is <code>/example1/page1</code>:
                            <br/><br/>
                            <code>../example2/page2?name1=value1&amp;name2=value2</code>
                        </td>
                        <td>
                            <ul>
                                <li><code>oxf.path=/example2/page2</code></li>
                                <li><code>name1=value1</code></li>
                                <li><code>name2=value2</code></li>
                            </ul>
                        </td>
                    </tr>
                </table>
                <p>
                    The following table illustrates resource URL rewriting:
                </p>
                <table ca="|p{0.5\textwidth}|p{0.5\textwidth}|">
                    <tr>
                        <th>Initial Path</th>
                        <th>Resulting Path</th>
                    </tr>
                    <tr>
                        <td>
                            <code>/path/to/my/image.gif?scale=100</code>
                        </td>
                        <td>
                            <code>/oxf/path/to/my/image.gif?scale=100</code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Assuming the current value of <code>oxf.path</code> is <code>/example1/page1</code>:
                            <br/><br/>
                            <code>my/image.gif?scale=100</code>
                        </td>
                        <td>
                            <code>/oxf/example1/my/image.gif?scale=100</code>
                            <br/><br/>

                            Note that using resource URLs relative to an OPS Portlet
                            path (as handled by OPS) does not necessarily make sense
                            unless you define your hierarchy of resources carefully.
                        </td>
                    </tr>
                </table>
            </section>
        </section>
        <section>
            <title>Known Limitations</title>
            <section>
                <title>Portlets</title>
                <ul>
                    <li>
                        The input document should not contain:
                        <ul>
                            <li>Elements and attribute containing the string <code>wsrp_rewrite</code></li>
                            <li>Namespace URIs containing the string <code>wsrp_rewrite</code></li>
                            <li>Processing instructions containing the string <code>wsrp_rewrite</code></li>
                        </ul>
                    </li>
                    <li>
                        It is not possible to specify:
                        <ul>
                            <li>A destination portlet mode</li>
                            <li>A destination window state</li>
                            <li>A secure URL</li>
                        </ul>
                    </li>
                </ul>
            </section>
        </section>
    </body>
</document>
